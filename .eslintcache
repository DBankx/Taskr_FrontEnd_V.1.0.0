[{"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\reportWebVitals.ts":"1","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavBottom.tsx":"2","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\SEO.tsx":"3","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\index.tsx":"4","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\home\\HomePage.tsx":"5","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\Navbar.tsx":"6","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavTop.tsx":"7","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\icons\\Icons.tsx":"8","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryPage.tsx":"9","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\app\\App.tsx":"10","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\InlineLoader.tsx":"11","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryBody.tsx":"12","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\FullPageSpinner.tsx":"13","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryActions.tsx":"14","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\api\\agent.ts":"15","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\TaskItem.tsx":"16","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\assets\\css\\chakra-ui-theme.ts":"17","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\paging\\Pagination.tsx":"18","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\reminders\\SignUpReminder.tsx":"19","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInPage.tsx":"20","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInForm.tsx":"21","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavSearchInput.tsx":"22","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\ProfileMenu.tsx":"23","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\AuthNavItems.tsx":"24","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\PriceQueryForm.tsx":"25","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\appStore.tsx":"26","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Alert.tsx":"27","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\authStore.tsx":"28","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskPage.tsx":"29","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskImages.tsx":"30","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\taskStore.tsx":"31","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskTop.tsx":"32","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskDetails.tsx":"33","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\BidForm.tsx":"34","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskCreatorDetails.tsx":"35","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskDescription.tsx":"36","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\rootstore.ts":"37","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\bidStore.tsx":"38","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidHistoryPage.tsx":"39","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidInfo.tsx":"40","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskTimer.tsx":"41","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidTable.tsx":"42","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Separator.tsx":"43","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\getBidStatus.ts":"44","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskBidItem.tsx":"45","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidPageForm.tsx":"46","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidAccordian.tsx":"47","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Title-category.tsx":"48","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\category.ts":"49","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\SoftAlert.tsx":"50","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskDetailsForm.tsx":"51","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\maps\\FormMap.tsx":"52","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormImageUploader.tsx":"53","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormUploadedImagesPreview.tsx":"54","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\deliveryTypes.ts":"55","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\LocationFinder.tsx":"56","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\copyStyle.ts":"57","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\enumFunctions.tsx":"58","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\ProfilePage.tsx":"59","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\TaskTab.tsx":"60","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\ActiveTasks.tsx":"61","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\TaskTable.tsx":"62","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\taskStatus.ts":"63","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\getErrors.tsx":"64","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\profileStore.tsx":"65","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\MyProfile.tsx":"66","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ProfileBox.tsx":"67","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\AccountBio.tsx":"68","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\DescriptionForm.tsx":"69","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\skill.tsx":"70","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\SkillsForm.tsx":"71","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Preview.tsx":"72","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\SocialsForm.tsx":"73","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\LanguageForm.tsx":"74","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ReviewSummary.tsx":"75","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Rater.tsx":"76","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\TagLine.tsx":"77"},{"size":425,"mtime":1607677411935,"results":"78","hashOfConfig":"79"},{"size":2485,"mtime":1609666422717,"results":"80","hashOfConfig":"79"},{"size":1946,"mtime":1610571843042,"results":"81","hashOfConfig":"79"},{"size":873,"mtime":1609622596600,"results":"82","hashOfConfig":"79"},{"size":1144,"mtime":1610306281019,"results":"83","hashOfConfig":"79"},{"size":588,"mtime":1610965734551,"results":"84","hashOfConfig":"79"},{"size":2518,"mtime":1610965713395,"results":"85","hashOfConfig":"79"},{"size":79276,"mtime":1611605503503,"results":"86","hashOfConfig":"79"},{"size":1517,"mtime":1610351220877,"results":"87","hashOfConfig":"79"},{"size":2845,"mtime":1611172427271,"results":"88","hashOfConfig":"79"},{"size":271,"mtime":1609353715022,"results":"89","hashOfConfig":"79"},{"size":1860,"mtime":1610307610747,"results":"90","hashOfConfig":"79"},{"size":248,"mtime":1609352810131,"results":"91","hashOfConfig":"79"},{"size":4664,"mtime":1611171323680,"results":"92","hashOfConfig":"79"},{"size":3140,"mtime":1611510728231,"results":"93","hashOfConfig":"79"},{"size":3180,"mtime":1611150451605,"results":"94","hashOfConfig":"79"},{"size":354,"mtime":1610818392524,"results":"95","hashOfConfig":"79"},{"size":964,"mtime":1609411308644,"results":"96","hashOfConfig":"79"},{"size":647,"mtime":1609418891029,"results":"97","hashOfConfig":"79"},{"size":1969,"mtime":1609448194784,"results":"98","hashOfConfig":"79"},{"size":4466,"mtime":1610532359295,"results":"99","hashOfConfig":"79"},{"size":2302,"mtime":1611485298934,"results":"100","hashOfConfig":"79"},{"size":1653,"mtime":1611485484285,"results":"101","hashOfConfig":"79"},{"size":1174,"mtime":1610454937587,"results":"102","hashOfConfig":"79"},{"size":2720,"mtime":1609262456322,"results":"103","hashOfConfig":"79"},{"size":821,"mtime":1610911614620,"results":"104","hashOfConfig":"79"},{"size":1038,"mtime":1609509530471,"results":"105","hashOfConfig":"79"},{"size":2689,"mtime":1610349166058,"results":"106","hashOfConfig":"79"},{"size":3414,"mtime":1611166961656,"results":"107","hashOfConfig":"79"},{"size":2809,"mtime":1610014121445,"results":"108","hashOfConfig":"79"},{"size":5006,"mtime":1611088827011,"results":"109","hashOfConfig":"79"},{"size":2649,"mtime":1610447401110,"results":"110","hashOfConfig":"79"},{"size":2899,"mtime":1611151020018,"results":"111","hashOfConfig":"79"},{"size":5343,"mtime":1611166930733,"results":"112","hashOfConfig":"79"},{"size":3091,"mtime":1610307717768,"results":"113","hashOfConfig":"79"},{"size":1010,"mtime":1610444548705,"results":"114","hashOfConfig":"79"},{"size":840,"mtime":1611245510906,"results":"115","hashOfConfig":"79"},{"size":2746,"mtime":1610351497523,"results":"116","hashOfConfig":"79"},{"size":2363,"mtime":1610351205676,"results":"117","hashOfConfig":"79"},{"size":4785,"mtime":1610308640260,"results":"118","hashOfConfig":"79"},{"size":738,"mtime":1610275409302,"results":"119","hashOfConfig":"79"},{"size":1690,"mtime":1610289242018,"results":"120","hashOfConfig":"79"},{"size":234,"mtime":1609429211018,"results":"121","hashOfConfig":"79"},{"size":474,"mtime":1610438890192,"results":"122","hashOfConfig":"79"},{"size":2258,"mtime":1611150381705,"results":"123","hashOfConfig":"79"},{"size":3196,"mtime":1610305391187,"results":"124","hashOfConfig":"79"},{"size":2159,"mtime":1610309405787,"results":"125","hashOfConfig":"79"},{"size":6925,"mtime":1611149664872,"results":"126","hashOfConfig":"79"},{"size":133,"mtime":1611141765490,"results":"127","hashOfConfig":"79"},{"size":347,"mtime":1610565679053,"results":"128","hashOfConfig":"79"},{"size":16610,"mtime":1611150147767,"results":"129","hashOfConfig":"79"},{"size":991,"mtime":1610615514143,"results":"130","hashOfConfig":"79"},{"size":3929,"mtime":1610816256671,"results":"131","hashOfConfig":"79"},{"size":1471,"mtime":1610721239863,"results":"132","hashOfConfig":"79"},{"size":57,"mtime":1611149087400,"results":"133","hashOfConfig":"79"},{"size":3904,"mtime":1611054324932,"results":"134","hashOfConfig":"79"},{"size":318,"mtime":1611077557281,"results":"135","hashOfConfig":"79"},{"size":380,"mtime":1611148501315,"results":"136","hashOfConfig":"79"},{"size":3145,"mtime":1611678467865,"results":"137","hashOfConfig":"79"},{"size":1168,"mtime":1611499051564,"results":"138","hashOfConfig":"79"},{"size":4697,"mtime":1611500461715,"results":"139","hashOfConfig":"79"},{"size":4933,"mtime":1611482453899,"results":"140","hashOfConfig":"79"},{"size":87,"mtime":1611321195156,"results":"141","hashOfConfig":"79"},{"size":468,"mtime":1610361256727,"results":"142","hashOfConfig":"79"},{"size":2158,"mtime":1611511586174,"results":"143","hashOfConfig":"79"},{"size":1620,"mtime":1611685207603,"results":"144","hashOfConfig":"79"},{"size":1982,"mtime":1611525306428,"results":"145","hashOfConfig":"79"},{"size":5752,"mtime":1611679609728,"results":"146","hashOfConfig":"79"},{"size":1376,"mtime":1611521682814,"results":"147","hashOfConfig":"79"},{"size":80,"mtime":1611524207827,"results":"148","hashOfConfig":"79"},{"size":2188,"mtime":1611607452654,"results":"149","hashOfConfig":"79"},{"size":956,"mtime":1611077701988,"results":"150","hashOfConfig":"79"},{"size":5490,"mtime":1611679542530,"results":"151","hashOfConfig":"79"},{"size":2247,"mtime":1611679649914,"results":"152","hashOfConfig":"79"},{"size":1381,"mtime":1611684354728,"results":"153","hashOfConfig":"79"},{"size":691,"mtime":1611682176899,"results":"154","hashOfConfig":"79"},{"size":1042,"mtime":1611685535059,"results":"155","hashOfConfig":"79"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},"1bnsgpt",{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"169"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":76,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"182"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"169"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"159"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"169"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"188"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"271"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"159"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"191"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"169"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"159"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"162"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\reportWebVitals.ts",["337"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavBottom.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\SEO.tsx",["338"],"﻿import React from \"react\"\r\nimport { Helmet } from \"react-helmet\";\r\n\r\ninterface IProps{\r\n    description?: string;\r\n    keywords?: string[];\r\n    url?: string;\r\n    image?: string;\r\n    title?: string;\r\n    lang?: string;\r\n}\r\n\r\nfunction SEO({ description, lang, title, keywords}: IProps) {\r\n\r\n    const metaKeywords = keywords ? keywords : [\"site\", \"portfolio\", \"full-stack developer\", \"developer\", \"developer\", \"software engineer\", \"website\"]\r\n\r\n    return (\r\n        <Helmet\r\n            htmlAttributes={{\r\n                lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | Taskr`}\r\n            meta={[\r\n                {\r\n                    name: `description`,\r\n                    content: description \r\n                },\r\n                {\r\n                    property: `og:title`,\r\n                    content: title\r\n                },\r\n                {\r\n                    property: `og:description`,\r\n                    content: description\r\n                },\r\n                {\r\n                    property: `og:type`,\r\n                    content: `website`\r\n                },\r\n                {\r\n                    name: `twitter:card`,\r\n                    content: `summary`\r\n                },\r\n                {\r\n                    name: `twitter:creator`,\r\n                    content: \"Hundeyin Oluwadamilola\"\r\n                },\r\n                {\r\n                    name: `twitter:title`,\r\n                    content: title\r\n                },\r\n                {\r\n                    name: `twitter:description`,\r\n                    content: description\r\n                },\r\n            ].concat(metaKeywords && metaKeywords.length > 0 ? {\r\n                name: `keywords`,\r\n                content: metaKeywords.join(\",\")\r\n            } : [])}\r\n        />\r\n    )\r\n}\r\n\r\nSEO.defaultProps = {\r\n    lang: `en`,\r\n    meta: [],\r\n    description: ``,\r\n}\r\n\r\n\r\n\r\nexport default SEO\r\n",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\index.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\home\\HomePage.tsx",["339"],"﻿import { Box} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport {useMediaQuery} from \"@chakra-ui/react\";\r\nimport {RightArrowIcon} from \"../../infrastructure/icons/Icons\";\r\n\r\nconst HomePage = () => {\r\n    const [isMobile] = useMediaQuery(\"(max-width: 400px)\");\r\n    return (\r\n        <div>\r\n            <Box className=\"home__banner\">\r\n                <div className=\"container\">\r\n                    <div className=\"home__banner__container\">\r\n               <h1 className=\"home__banner__text\">The {isMobile ? \"No 1\": \"number one\"} online marketplace for delegating <i style={{fontWeight: \"initial\"}}>tasks</i></h1>\r\n                        <div className={isMobile ? \"\" : \"flexer\"}>\r\n                            <button className={isMobile ? \"btn btn__accent btn__shadow btn__bg btn__full-width\" : \"btn btn__primary btn__shadow btn__bg \"}>Become a runner</button>\r\n                            <p className=\"home__banner__learn\">Learn more <RightArrowIcon boxSize={8} /></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\Navbar.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavTop.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\icons\\Icons.tsx",["340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryPage.tsx",["416"],"﻿import React, {useContext, useEffect} from \"react\";\r\nimport QueryActions from \"./QueryActions\";\r\nimport rootStoreContext from \"../../application/stores/rootstore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport InlineLoader from \"../../application/appLayout/InlineLoader\";\r\nimport QueryBody from \"./QueryBody\";\r\nimport {StringParam, useQueryParams} from \"use-query-params\";\r\n\r\nconst QueryPage = () => {\r\n    const {loadingInitial, tasks, getAllJobs, taskQueryValues, setTasksQueryParams} = useContext(rootStoreContext).taskStore;\r\n    const [queryParams] = useQueryParams({\r\n        title: StringParam,\r\n        address: StringParam\r\n    }) \r\n    \r\n    setTasksQueryParams(queryParams.title!);\r\n    useEffect(() => {\r\n        getAllJobs();\r\n    }, [getAllJobs, taskQueryValues, queryParams])\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"main\">\r\n                <div>\r\n                <h1 className=\"text__lg\">Results for {`\"${queryParams.title}\"`}</h1>\r\n                    <div className=\"query__body\">\r\n                    <QueryActions />\r\n                        {loadingInitial || tasks === null ? <InlineLoader /> : (\r\n                            <div>\r\n                                <QueryBody tasks={tasks} taskQueryValues={taskQueryValues}/>\r\n                            </div>\r\n                        )}                   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(QueryPage);",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\app\\App.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\InlineLoader.tsx",["417"],"import { Spinner } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst InlineLoader = () => {\r\n    return (\r\n        <div className=\"spinner__inline\">\r\n            <Spinner size=\"xl\" color=\"brand.200\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InlineLoader;",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryBody.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\FullPageSpinner.tsx",["418"],"﻿import { Spinner } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nexport default function Loader(){\r\n    return (\r\n        <div className=\"middle_position\">\r\n            <Spinner size=\"xl\" color=\"brand.100\"  />\r\n        </div>\r\n    )\r\n}",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryActions.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\api\\agent.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\TaskItem.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\assets\\css\\chakra-ui-theme.ts",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\paging\\Pagination.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\reminders\\SignUpReminder.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavSearchInput.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\ProfileMenu.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\AuthNavItems.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\PriceQueryForm.tsx",["419"],"﻿import {FormControl, FormLabel, HStack, InputLeftElement, InputGroup, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, MenuDivider, Flex, Spacer } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst PriceQueryForm = () => {\r\n    return (\r\n        <form>\r\n            <div style={{padding: \"1em\"}}>\r\n            <HStack spacing=\"24px\">\r\n                <FormControl id=\"min\">\r\n                    <FormLabel className=\"query__price__label\">Min</FormLabel>\r\n                    <InputGroup>\r\n                        <InputLeftElement\r\n                            pointerEvents=\"none\"\r\n                            fontSize=\"1.2em\"\r\n                            className=\"query__price__placeholder\"\r\n                        >\r\n                            $\r\n                        </InputLeftElement>\r\n                        <NumberInput size=\"md\" defaultValue={0} precision={2} min={0}>\r\n                                <NumberInputField className=\"query__price__input\" />\r\n                            <NumberInputStepper>\r\n                                <NumberIncrementStepper />\r\n                                <NumberDecrementStepper />\r\n                            </NumberInputStepper>\r\n                        </NumberInput>\r\n                    </InputGroup>\r\n                </FormControl>\r\n                <FormControl id=\"max\">\r\n                    <FormLabel className=\"query__price__label\">Max</FormLabel>\r\n                    <InputGroup>\r\n                        <InputLeftElement\r\n                            pointerEvents=\"none\"\r\n                            fontSize=\"1.2em\"\r\n                            className=\"query__price__placeholder\"\r\n                        >\r\n                            $\r\n                        </InputLeftElement>\r\n                        <NumberInput size=\"md\" defaultValue={0} precision={2} min={0}>\r\n                            <NumberInputField className=\"query__price__input\" />\r\n                            <NumberInputStepper>\r\n                                <NumberIncrementStepper />\r\n                                <NumberDecrementStepper />\r\n                            </NumberInputStepper>\r\n                        </NumberInput>\r\n                    </InputGroup>\r\n                </FormControl> \r\n            </HStack>\r\n            </div>\r\n            <MenuDivider />\r\n            <Flex alignItems=\"center\" style={{padding: \"0 1em\"}}>\r\n                <button className=\"btn btn__none\">Clear All</button>\r\n                <Spacer />\r\n                <button className=\"btn btn__primary btn__sm\">Apply</button>\r\n            </Flex>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PriceQueryForm;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\appStore.tsx",["420","421","422","423"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable} from \"mobx\";\r\n// import React from \"react\";\r\n\r\n//-----------------------------------------------\r\n// General store for application\r\n//------------------------------------------------\r\n\r\nexport class AppStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n    @observable appLoaded = false;\r\n    @observable uploadedTaskFormFiles : any[] = [];\r\n    \r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n    \r\n    @action setPreviewImages = (files: any) => {\r\n        this.uploadedTaskFormFiles = files;\r\n    }\r\n    \r\n   @action removePreviewImages = () => {\r\n        this.uploadedTaskFormFiles = [];\r\n   } \r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Alert.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\authStore.tsx",["424","425","426","427"],"import {RootStore} from \"./rootstore\";\r\nimport {action, computed, makeObservable, observable, reaction, runInAction} from \"mobx\";\r\nimport {ISignInFormValues, IUser} from \"../../infrastructure/models/auth\";\r\nimport {AuthRequest} from \"../api/agent\";\r\nimport React from \"react\";\r\nimport Alert from \"../common/Alert\";\r\nimport {CloseIcon} from \"../../infrastructure/icons/Icons\";\r\nimport {toast} from \"react-toastify\";\r\n\r\n// -------------------------------------------\r\n// Auth store for all auth actions\r\n// -------------------------------------------\r\n\r\nexport class AuthStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n        reaction(() => this.token, (token) => {\r\n            if(token){\r\n                // set the token value in local storage as soon as the token changes\r\n                localStorage.setItem(\"jwt\", token);\r\n            } else {\r\n                localStorage.removeItem(\"jwt\");\r\n            }\r\n        })\r\n    }\r\n    \r\n    @observable token : string | null = localStorage.getItem(\"jwt\");\r\n    @observable user : IUser | null = null;\r\n\r\n    \r\n    @computed get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    // ------------------------\r\n    // Actions\r\n    // ------------------------\r\n    \r\n    \r\n    // TODO - Login should refresh the page\r\n    @action signInUser = async (signInFormValues: ISignInFormValues) => {\r\n        try{\r\n            const signInResponse = await AuthRequest.signIn(signInFormValues);\r\n            localStorage.setItem(\"jwt\", signInResponse.token);\r\n            runInAction(() => {\r\n                this.user = signInResponse.user;\r\n                this.rootStore.appStore.setAppLoaded();\r\n            })\r\n        } catch(error){\r\n            toast.error(<Alert subject=\"Invalid credentials\" message=\"\" icon={<CloseIcon boxSize={8} color=\"#73000c\" />} type=\"error\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action getCurrentUser = async () => {\r\n        try{\r\n            const authResponse = await AuthRequest.getCurrentUser();\r\n            localStorage.setItem(\"jwt\", authResponse.token);\r\n            runInAction(() => {\r\n                this.user = authResponse.user;\r\n                this.rootStore.appStore.setAppLoaded();\r\n            })\r\n        } catch(error){\r\n            toast.error(<Alert subject=\"Error occurred\" message=\"Problem getting tasks\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} type=\"error\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action logOutUser = () => {\r\n        localStorage.removeItem(\"jwt\");\r\n        this.user = null;\r\n        window.location.reload();\r\n    }\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskImages.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\taskStore.tsx",["428","429","430","431","432","433"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {ITaskQueryValues, IPaginatedTaskResponse, ITask} from \"../../infrastructure/models/task\";\r\nimport {JobRequest} from \"../api/agent\";\r\nimport {toast} from \"react-toastify\";\r\nimport Alert from \"../common/Alert\";\r\nimport {CheckmarkIcon, CloseIcon} from \"../../infrastructure/icons/Icons\";\r\nimport React from \"react\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\n\r\n//---------------------------------------------------------\r\n// Store for all Job related actions\r\n//---------------------------------------------------------\r\n\r\nexport class TaskStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore;\r\n    }\r\n    \r\n    @observable tasks: IPaginatedTaskResponse | null = null;\r\n    @observable loadingInitial = false;\r\n    @observable taskQueryValues: ITaskQueryValues = {title: \"\", pageNumber: 1, pageSize: 20, maxPrice: 0, minPrice: 0};\r\n    @observable task: ITask | null = null;\r\n    @observable watching = false;\r\n    \r\n    // ------------------------\r\n    // Actions\r\n    // ------------------------\r\n    \r\n    @action getAllJobs = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const paginatedJobResponse = await JobRequest.getAllTasks(this.taskQueryValues);\r\n            runInAction(() => {\r\n                this.tasks = paginatedJobResponse;\r\n                this.loadingInitial = false;\r\n            })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Problem loading tasks\" />)\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @action setTasksQueryParams = (title?: string, maxPrice?: number, minPrice?: number, pageNumber?: number, pageSize?: number) => {\r\n        this.taskQueryValues.title = title ? title : \"\";\r\n        this.taskQueryValues.maxPrice = maxPrice ? maxPrice : 0;\r\n        this.taskQueryValues.minPrice = minPrice ? minPrice : 0 ; \r\n        this.taskQueryValues.pageNumber = pageNumber ? pageNumber : 1;\r\n        this.taskQueryValues.pageSize = pageSize ? pageSize : 20;\r\n    }\r\n    \r\n    @action getTaskById = async (id: string) => {\r\n        this.loadingInitial = true;\r\n        try{\r\n          const taskResponse = await JobRequest.getTaskById(id);\r\n          runInAction(() => {\r\n              this.task = taskResponse;\r\n              this.loadingInitial = false;\r\n          })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Problem loading task\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action watchTask = async (taskId: string) => {\r\n        this.watching = true;\r\n        try{\r\n            await JobRequest.watchTask(taskId);\r\n            await runInAction(async () => {\r\n                if(this.tasks){\r\n                    const watchedTask = await this.tasks.data.find((task) => task.id === taskId);\r\n                    if(watchedTask !== undefined){\r\n                        watchedTask.isWatching = true;\r\n                    }\r\n                }\r\n                if(this.task){\r\n                    this.task.isWatching = true;\r\n                    this.task.watchCount++;\r\n                }\r\n                \r\n                this.watching = false;\r\n            })\r\n        } catch(e){\r\n            runInAction(() => this.watching = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @action unWatchTask = async (taskId: string) => {\r\n        this.watching = true;\r\n        try{\r\n            await JobRequest.unwatchTask(taskId);\r\n            await runInAction(async () => {\r\n                if(this.tasks){\r\n                    const watchedTask = await this.tasks.data.find((task) => task.id === taskId);\r\n                    if(watchedTask !== undefined){\r\n                        watchedTask.isWatching = false;\r\n                    }\r\n                }\r\n                if(this.task){\r\n                    this.task.isWatching = false;\r\n                    this.task.watchCount--;\r\n                }\r\n\r\n                this.watching = false;\r\n            })\r\n        } catch(e){\r\n            runInAction(() => this.watching = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    \r\n    @action createTask = async (taskSubmission: FormData) => {\r\n        try{\r\n            await JobRequest.createTask(taskSubmission);\r\n            toast.success(<Alert type=\"success\" subject=\"Task created\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"Your task has been created & activated\" />)\r\n        }catch (e) {\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskTop.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\BidForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskCreatorDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskDescription.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\rootstore.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\bidStore.tsx",["434","435","436"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {IBid, IBidSubmission} from \"../../infrastructure/models/bid\";\r\nimport { toast } from \"react-toastify\";\r\nimport {CheckmarkIcon, CloseIcon} from \"../../infrastructure/icons/Icons\";\r\nimport Alert from \"../common/Alert\";\r\nimport React from \"react\";\r\nimport {BidRequest} from \"../api/agent\";\r\n\r\nexport class BidStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n   @observable bid: IBid | null = null;\r\n   @observable bids: IBid[] | null = null; \r\n   @observable loadingInitialBids = false; \r\n    \r\n    // Actions\r\n    @action createBid = async (values: IBidSubmission, jobId: string) => {\r\n        try{\r\n            const bid = await BidRequest.placeBid(values, jobId);\r\n            runInAction(() => {\r\n                this.bid = bid;\r\n                if(this.rootStore.taskStore.task) {\r\n                    this.rootStore.taskStore.task.bidsCount += 1;\r\n                    this.rootStore.taskStore.task.isBidActive = true;\r\n                }\r\n                if(this.rootStore.bidStore.bids){\r\n                    // find if a bid by the user exists\r\n                    const userBid = this.rootStore.bidStore.bids.find((bid) => bid.userName === this.rootStore.authStore.user!.username);\r\n                    if(userBid){\r\n                        userBid.price = bid.price;\r\n                        userBid.createdAt = bid.createdAt;\r\n                    } else {\r\n                        this.rootStore.bidStore.bids.unshift(bid);\r\n                    }\r\n                }\r\n                toast.success(<Alert type=\"success\" subject=\"Success\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"Successfully placed a bid\" />);\r\n            })\r\n        }catch(error){\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Error occurred while submitting bid\" />);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action getTaskBids = async (taskId: string) => {\r\n        this.loadingInitialBids = true;\r\n        try{\r\n            const taskBids = await BidRequest.getAllTaskBids(taskId);\r\n            runInAction(() => {\r\n                this.bids = taskBids;\r\n                this.loadingInitialBids = false;\r\n            })\r\n        }catch (error) {\r\n            runInAction(() => this.loadingInitialBids = false);\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Problem loading task bids\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidHistoryPage.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidInfo.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskTimer.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidTable.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Separator.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\getBidStatus.ts",["437"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskBidItem.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidPageForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidAccordian.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Title-category.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\category.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\SoftAlert.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskDetailsForm.tsx",["438","439","440","441","442","443"],"﻿import {\r\n    Button,\r\n    Checkbox,\r\n    Divider,\r\n    Input, InputGroup,\r\n    InputLeftElement,\r\n    NumberInput, NumberInputField,\r\n    SimpleGrid,\r\n    Stack,\r\n    Textarea\r\n} from \"@chakra-ui/react\";\r\nimport { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, {lazy, Suspense, useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {StringParam, useQueryParams, NumberParam} from \"use-query-params\";\r\nimport SEO from \"../../application/appLayout/SEO\";\r\nimport {InfoIcon} from \"../../infrastructure/icons/Icons\";\r\nimport TaskFormImageUploader from \"./TaskFormImageUploader\";\r\nimport TaskFormUploadedImagesPreview from \"./TaskFormUploadedImagesPreview\";\r\nimport {DeliveryTypes} from \"../../infrastructure/enums/deliveryTypes\";\r\nimport InlineLoader from \"../../application/appLayout/InlineLoader\";\r\nimport {ITaskSubmission} from \"../../infrastructure/models/task\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport rootStoreContext from \"../../application/stores/rootstore\";\r\nimport {history} from \"../../index\";\r\nimport {Category} from \"../../infrastructure/enums/category\";\r\n\r\nconst Preview = lazy(() => import(\"./Preview\"));\r\nconst LocationComponent = lazy(() => import(\"./LocationFinder\"));\r\n\r\nconst TaskDetailsForm = () => {\r\n    const [taskDetails] = useQueryParams({\r\n        title: StringParam,\r\n        category: NumberParam,\r\n        deliveryType: NumberParam\r\n    })\r\n\r\n    const [isPreviewOpen, setIsPreviewOpen] = useState(false);\r\n\r\n    const togglePreviewWindow = useCallback(() => {\r\n        setIsPreviewOpen(!isPreviewOpen)\r\n    }, [isPreviewOpen])\r\n    const closePreviewWindow = useCallback(() => {\r\n        setIsPreviewOpen(false)\r\n    }, [isPreviewOpen]);\r\n\r\n    useEffect(() =>\r\n        window.addEventListener('beforeunload', () => closePreviewWindow())\r\n    );\r\n\r\n   const {createTask} = useContext(rootStoreContext).taskStore;\r\n   \r\n    return (\r\n        <div className=\"container\">\r\n            <SEO title={`${taskDetails.title} for ${taskDetails.category}`} />\r\n            <div className=\"main\">\r\n                <div style={{margin: \"1em 0\"}}>\r\n                    <h1 className=\"text__darker text__bigger__md\">Post your task it&apos;s <span className=\"text__primary\">Fast</span> & <span className=\"text__primary\">Easy</span></h1>\r\n                </div>\r\n                \r\n                <Formik initialValues={{title: taskDetails.title!, id: uuid(), description: \"\", urgent: false, imageFiles: [], address: \"\", postCode: \"\", price: 0, deliveryDate: \"\", category: taskDetails.category!, deliveryType: taskDetails.deliveryType!}} onSubmit={(values: ITaskSubmission, action) => {\r\n                    const taskSubmissionData = new FormData();\r\n                    taskSubmissionData.append(\"id\", values.id);\r\n                    taskSubmissionData.append(\"title\", values.title);\r\n                    taskSubmissionData.append(\"description\", values.description);\r\n                    values.imageFiles.forEach((image) => {\r\n                        taskSubmissionData.append(\"imageFiles\", image);\r\n                    })\r\n                    taskSubmissionData.append(\"address\", values.address);\r\n                    taskSubmissionData.append(\"postCode\", values.postCode);\r\n                    taskSubmissionData.append(\"initialPrice\", values.price.toString());\r\n                    taskSubmissionData.append(\"deliveryDate\", new Date(values.deliveryDate).toUTCString());\r\n                    taskSubmissionData.append(\"category\", values.category.toString());\r\n                    \r\n                    createTask(taskSubmissionData).then(() => history.push(`/task/${values.id}`)).catch(() => action.setSubmitting(false));\r\n                }}>\r\n                    {({\r\n                       handleChange,\r\n                       handleBlur, \r\n                       handleSubmit,\r\n                       values,\r\n                       errors,\r\n                       touched,\r\n                        setFieldValue,\r\n                        setFieldError,\r\n                        isSubmitting\r\n                    }) => (\r\n                        \r\n                    \r\n                <form onSubmit={handleSubmit}>\r\n                    \r\n                <div className=\"form__box\">\r\n                  <div className=\"form__box__description\">\r\n                      <div className=\"numbered__box\">1</div>\r\n                      Task Details\r\n                  </div>\r\n                  <Divider mt={4} mb={4} />  \r\n                  <div className=\"form__field form__task\">\r\n                      <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"15px\", sm: \"8px\"}}>\r\n                          <p className=\"form__detail\">Task title:</p>\r\n                          <div style={{width: \"100%\"}}>\r\n                          <Textarea name=\"title\" className=\"form__textarea form__textarea__no__label\" id=\"title\" rows={3} onChange={handleChange} onBlur={handleBlur} value={values.title} />\r\n                          {errors.title && touched.title && (\r\n                              <small className=\"form__error\">{errors.title}</small>\r\n                          )}\r\n                          </div>\r\n                      </Stack>\r\n                  </div>\r\n                    <div className=\"form__field form__task\">\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Selected Category:</p>\r\n                            <div style={{width: \"100%\"}}>\r\n                            <p className=\"text__darker\">{Category[taskDetails.category!]}</p>\r\n                            <span className=\"text__blue\">change</span>\r\n                            </div>\r\n                        </Stack>\r\n                    </div>\r\n\r\n                    <div className=\"form__field form__task\">\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Description:</p>\r\n                            <div style={{width: \"100%\"}}>\r\n                                <Textarea name=\"description\" className=\"form__textarea form__textarea__no__label\" id=\"title\" rows={7} onChange={handleChange} onBlur={handleBlur} value={values.description} />\r\n                                {errors.description && touched.description ? (\r\n                                    <small className=\"form__error\">{errors.description}</small>\r\n                                ) : <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Be as specific as you can about what needs doing</small>}\r\n                            </div>\r\n                        </Stack>\r\n                    </div>  \r\n\r\n                    <div className=\"form__field form__task\" style={{margin: \"2em 0\"}}>\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Urgency:<span style={{display: \"block\"}}>(Optional)</span></p>\r\n                                \r\n                            <div style={{width: \"100%\"}}>\r\n                                <Checkbox className=\"form__checkbox__bg\" size=\"lg\" colorScheme=\"green\" iconSize=\"2em\" spacing=\"1em\"><div className=\"urgent__label\">URGENT</div>\r\n                                </Checkbox>\r\n                                <div>\r\n                                <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Add an urgent label to let taskers know that you are looking for quick responses</small>\r\n                                </div>\r\n                                 </div>\r\n                        </Stack>\r\n                    </div>\r\n\r\n                    <div className=\"form__field form__task\" >\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Tags:<span style={{display: \"block\"}}>(Optional)</span></p>\r\n                            <div style={{width: \"100%\"}}>\r\n                                <small className=\"text__dark__grey\">Increase your exposure. Enter up to 4 keywords taskers can use to search yout task.</small>\r\n                                \r\n                                <Stack style={{marginTop: \"1em\"}} direction=\"row\" spacing=\"20px\">\r\n                                    <Input style={{width: \"300px\"}} placeholder=\"Add a tag\" className=\"form__input\" />\r\n                                    <Button type=\"button\" style={{fontWeight: 500}} className=\"btn btn__sm btn__primary\">Add tag</Button>\r\n                                </Stack>\r\n                            </div>\r\n                        </Stack>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n                    <div className=\"form__box\">\r\n                        <div className=\"form__box__description\">\r\n                            <div className=\"numbered__box\">2</div>\r\n                            Task Media (Optional)\r\n                        </div>\r\n                        <Divider mt={4} mb={4} />\r\n                        \r\n                        <h1 className=\"title\">Add photos to imporve the interest on your task</h1>\r\n                        \r\n                        <p className=\"text__silent text__sm text__small__cut\">Add pictures that explain your task or pictures of what you want to be done. You can upload a maximum of 3 photos. The photos are stored in a cloudinary bucket and resize the image to the recommended 618px by 427px ratio. Drag an drop your photos into the given area below.</p>\r\n                        \r\n                        <SimpleGrid style={{margin: \"2em 0\", width: \"100%\"}} templateColumns={{xl: \"1fr 1fr\", lg: \"1fr 1fr\", md: \"1fr\", sm: \"1fr\"}}   spacing=\"20px\">\r\n                            <div>\r\n                        <TaskFormImageUploader setFieldValue={setFieldValue} />\r\n                            </div>\r\n                            <div>\r\n                        <TaskFormUploadedImagesPreview />\r\n                            </div>\r\n                        </SimpleGrid>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form__box\">\r\n                        <div className=\"form__box__description\">\r\n                            <div className=\"numbered__box\">3</div>\r\n                            Task Location\r\n                        </div>\r\n                        <Divider mt={4} mb={4} />\r\n                        \r\n                        <div style={{marginBottom: \"1em\"}}>\r\n                            <p className=\"bold__label\">Delivery Type: <span className=\"text__darker\">{DeliveryTypes[taskDetails.deliveryType!]}</span></p>\r\n                            <p className=\"text__blue\">Change</p>\r\n                        </div>\r\n                        {taskDetails.deliveryType! === DeliveryTypes.InPerson ? (\r\n                            <Suspense fallback={<InlineLoader />}>\r\n                                <p className=\"text__darker\">Search and select your address</p>\r\n                                <LocationComponent addressErrors={errors.address} setFieldError={setFieldError} setFieldValue={setFieldValue} values={values} />\r\n                                <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>If you cannot see your address please select online as the delivery type then convey your real address to the runner on messages</small>\r\n                               \r\n                            </Suspense>\r\n                        ) : (\r\n                            <p className=\"text__darker\">This task will be delivered online</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"form__box\">\r\n                        <div className=\"form__box__description\">\r\n                            <div className=\"numbered__box\">4</div>\r\n                            Budget & Dates\r\n                        </div>\r\n                        <Divider mt={4} mb={4} />\r\n\r\n                        <div className=\"form__field form__task\">\r\n                            <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                                <p className=\"form__detail\">Budget:</p>\r\n                                <div style={{width: \"100%\"}}>\r\n                                    <InputGroup>\r\n                                        <InputLeftElement\r\n                                            pointerEvents=\"none\"\r\n                                            fontSize=\"1.2em\"\r\n                                            className=\"query__price__placeholder__green\"\r\n                                        >\r\n                                            $\r\n                                        </InputLeftElement>\r\n                                        <NumberInput  clampValueOnBlur={false}  size=\"md\" defaultValue={0} precision={2} min={0}>\r\n                                            <NumberInputField name=\"price\" error={!!errors.price && touched.price} value={values.price} onChange={handleChange} onBlur={handleBlur}  className=\"task__price__input\" />\r\n                                        </NumberInput>\r\n                                    </InputGroup> \r\n                                    {errors.price && touched.price ? (\r\n                                        <small className=\"form__error\">{errors.price}</small>\r\n                                    ) : <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Your budget signifies the max amount you can pay, runners will start bidding from that price.</small>}\r\n                                </div>\r\n                            </Stack>\r\n                        </div>\r\n\r\n                        <div className=\"form__field form__task\">\r\n                            <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                                <p className=\"form__detail\">Delivery Date:</p>\r\n                                <div style={{width: \"100%\"}}>\r\n                                    <Input className=\"form__input\" type=\"date\" value={values.deliveryDate} onChange={handleChange} onBlur={handleBlur} name=\"deliveryDate\" min={new Date().toISOString().split(\"T\")[0]} />\r\n                                    {errors.deliveryDate && touched.deliveryDate ? (\r\n                                        <small className=\"form__error\">{errors.deliveryDate}</small>\r\n                                    ) : <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Your task ends on the given date and you will have to re-activate it and set a new date</small>}\r\n                                </div>\r\n                            </Stack>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div style={{margin: \"1em 0\", lineHeight: \"12px\"}}>\r\n                        <small className=\"text__darker text__small__cut\">By listing your task on taskr, you are agreeing to our <span className=\"text__blue\">terms of use, privacy policy</span> and <span className=\"text__blue\">site policies</span>.</small>\r\n                        <small className=\"text__darker text__small__cut\" style={{display: \"block\"}}>Please do not post duplicate tasks.</small>\r\n                    </div>\r\n\r\n                    <Stack direction=\"row\" spacing=\"20px\">\r\n                    <Button isLoading={isSubmitting} className=\"btn btn__primary btn__nm btn__bg btn__shadow \" type=\"submit\">List your task</Button>\r\n                        <Button className=\"btn btn__white btn__nm btn__bg \" type=\"submit\" onClick={togglePreviewWindow}>Preview</Button>\r\n                    </Stack>\r\n                </form>\r\n                    )}\r\n                </Formik>\r\n                \r\n            </div>\r\n            {isPreviewOpen && (\r\n                <Suspense fallback={<InlineLoader />}>\r\n                <Preview closeWindow={closePreviewWindow}>\r\n                    apple\r\n                </Preview>\r\n                </Suspense>\r\n            )} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(TaskDetailsForm);","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\maps\\FormMap.tsx",["444"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormImageUploader.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormUploadedImagesPreview.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\deliveryTypes.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\LocationFinder.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\copyStyle.ts",["445","446","447"],"﻿// function to copy style into an external window\r\n// @ts-ignore\r\nexport default function copyStyles(sourceDoc, targetDoc) {\r\n    Array.from(\r\n        sourceDoc.querySelectorAll('link[rel=\"stylesheet\"], style')\r\n    ).forEach((link: any) => {\r\n        targetDoc.head.appendChild(link.cloneNode(true));\r\n    });\r\n}\r\n","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\enumFunctions.tsx",["448","449","450","451","452","453"],"﻿export function getAllEnumKeys(enumType: any){\r\n    return Object.keys(enumType).filter(key => isNaN(Number(key)))\r\n}\r\nexport function getAllEnumValues(enumType: any) {\r\n    return getAllEnumKeys(enumType).map((key: any) => enumType[key])\r\n}\r\nexport function getAllEnumEntries(enumType: any) {\r\n    return getAllEnumKeys(enumType).map((key : any) => [key, enumType[key]])\r\n}   ","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\ProfilePage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\TaskTab.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\ActiveTasks.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\TaskTable.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\taskStatus.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\getErrors.tsx",["454","455"],"﻿import {toast} from \"react-toastify\";\r\nimport Alert from \"../../application/common/Alert\";\r\nimport {CloseIcon} from \"../icons/Icons\";\r\nimport React from \"react\";\r\n\r\nexport function alertErrors(errors: any){\r\n    const errorValuesArray = Object.values(errors.response.data.errors);\r\n    errorValuesArray.forEach((err: any) => (\r\n        toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message={err} />)\r\n))\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\profileStore.tsx",["456","457"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {ITask} from \"../../infrastructure/models/task\";\r\nimport {profileRequest} from \"../api/agent\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\nimport {TaskStatus} from \"../../infrastructure/enums/taskStatus\";\r\nimport {IPrivateProfile} from \"../../infrastructure/models/profile\";\r\n\r\nexport class ProfileStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n    @observable profileActiveTasks : ITask[] | null = null;\r\n    @observable profileInactiveTasks : ITask[] | null = null; \r\n    @observable loadingInitial = false;\r\n    @observable privateProfile : IPrivateProfile | null = null;\r\n    \r\n    \r\n    @action getProfileTasks = async (taskStatus: TaskStatus) => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const tasks = await profileRequest.getAllTasks(taskStatus);\r\n            runInAction(() => {\r\n                switch (taskStatus) {\r\n                    case TaskStatus.Active:\r\n                        this.profileActiveTasks = tasks;\r\n                        break;\r\n                    case TaskStatus.InActive:\r\n                        this.profileInactiveTasks = tasks;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.loadingInitial = false;\r\n            })\r\n        }catch (errors) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    @observable getPrivateProfile = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n           const profile = await profileRequest.getProfile();\r\n           runInAction(() => {\r\n               this.privateProfile = profile;\r\n               this.loadingInitial = false;\r\n           })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\MyProfile.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ProfileBox.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\AccountBio.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\DescriptionForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\skill.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\SkillsForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Preview.tsx",["458","459"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\SocialsForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\forms\\LanguageForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ReviewSummary.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Rater.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\TagLine.tsx",[],{"ruleId":"460","severity":1,"message":"461","line":3,"column":25,"nodeType":"462","messageId":"463","endLine":3,"endColumn":57},{"ruleId":"460","severity":1,"message":"461","line":13,"column":1,"nodeType":"464","messageId":"463","endLine":13,"endColumn":60},{"ruleId":"460","severity":1,"message":"461","line":6,"column":18,"nodeType":"462","messageId":"463","endLine":6,"endColumn":23},{"ruleId":"460","severity":1,"message":"461","line":4,"column":8,"nodeType":"464","messageId":"463","endLine":4,"endColumn":41},{"ruleId":"460","severity":1,"message":"465","line":4,"column":30,"nodeType":"466","messageId":"467","endLine":4,"endColumn":40},{"ruleId":"460","severity":1,"message":"461","line":56,"column":8,"nodeType":"464","messageId":"463","endLine":56,"endColumn":39},{"ruleId":"460","severity":1,"message":"465","line":56,"column":28,"nodeType":"466","messageId":"467","endLine":56,"endColumn":38},{"ruleId":"460","severity":1,"message":"461","line":103,"column":8,"nodeType":"464","messageId":"463","endLine":103,"endColumn":38},{"ruleId":"460","severity":1,"message":"465","line":103,"column":27,"nodeType":"466","messageId":"467","endLine":103,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":152,"column":8,"nodeType":"464","messageId":"463","endLine":152,"endColumn":43},{"ruleId":"460","severity":1,"message":"465","line":152,"column":32,"nodeType":"466","messageId":"467","endLine":152,"endColumn":42},{"ruleId":"460","severity":1,"message":"461","line":200,"column":8,"nodeType":"464","messageId":"463","endLine":200,"endColumn":44},{"ruleId":"460","severity":1,"message":"465","line":200,"column":33,"nodeType":"466","messageId":"467","endLine":200,"endColumn":43},{"ruleId":"460","severity":1,"message":"461","line":212,"column":8,"nodeType":"464","messageId":"463","endLine":212,"endColumn":43},{"ruleId":"460","severity":1,"message":"465","line":212,"column":32,"nodeType":"466","messageId":"467","endLine":212,"endColumn":42},{"ruleId":"460","severity":1,"message":"461","line":220,"column":8,"nodeType":"464","messageId":"463","endLine":220,"endColumn":36},{"ruleId":"460","severity":1,"message":"465","line":220,"column":25,"nodeType":"466","messageId":"467","endLine":220,"endColumn":35},{"ruleId":"460","severity":1,"message":"461","line":317,"column":8,"nodeType":"464","messageId":"463","endLine":317,"endColumn":41},{"ruleId":"460","severity":1,"message":"465","line":317,"column":30,"nodeType":"466","messageId":"467","endLine":317,"endColumn":40},{"ruleId":"460","severity":1,"message":"461","line":326,"column":8,"nodeType":"464","messageId":"463","endLine":326,"endColumn":41},{"ruleId":"460","severity":1,"message":"465","line":326,"column":30,"nodeType":"466","messageId":"467","endLine":326,"endColumn":40},{"ruleId":"460","severity":1,"message":"461","line":334,"column":8,"nodeType":"464","messageId":"463","endLine":334,"endColumn":39},{"ruleId":"460","severity":1,"message":"465","line":334,"column":28,"nodeType":"466","messageId":"467","endLine":334,"endColumn":38},{"ruleId":"460","severity":1,"message":"461","line":383,"column":8,"nodeType":"464","messageId":"463","endLine":383,"endColumn":40},{"ruleId":"460","severity":1,"message":"465","line":383,"column":29,"nodeType":"466","messageId":"467","endLine":383,"endColumn":39},{"ruleId":"460","severity":1,"message":"461","line":391,"column":8,"nodeType":"464","messageId":"463","endLine":391,"endColumn":45},{"ruleId":"460","severity":1,"message":"465","line":391,"column":34,"nodeType":"466","messageId":"467","endLine":391,"endColumn":44},{"ruleId":"460","severity":1,"message":"461","line":399,"column":8,"nodeType":"464","messageId":"463","endLine":399,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":399,"column":26,"nodeType":"466","messageId":"467","endLine":399,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":455,"column":8,"nodeType":"464","messageId":"463","endLine":455,"endColumn":38},{"ruleId":"460","severity":1,"message":"465","line":455,"column":27,"nodeType":"466","messageId":"467","endLine":455,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":463,"column":8,"nodeType":"464","messageId":"463","endLine":463,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":463,"column":26,"nodeType":"466","messageId":"467","endLine":463,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":514,"column":8,"nodeType":"464","messageId":"463","endLine":514,"endColumn":45},{"ruleId":"460","severity":1,"message":"465","line":514,"column":34,"nodeType":"466","messageId":"467","endLine":514,"endColumn":44},{"ruleId":"460","severity":1,"message":"461","line":553,"column":8,"nodeType":"464","messageId":"463","endLine":553,"endColumn":44},{"ruleId":"460","severity":1,"message":"465","line":553,"column":33,"nodeType":"466","messageId":"467","endLine":553,"endColumn":43},{"ruleId":"460","severity":1,"message":"461","line":592,"column":8,"nodeType":"464","messageId":"463","endLine":592,"endColumn":44},{"ruleId":"460","severity":1,"message":"465","line":592,"column":33,"nodeType":"466","messageId":"467","endLine":592,"endColumn":43},{"ruleId":"460","severity":1,"message":"461","line":641,"column":8,"nodeType":"464","messageId":"463","endLine":641,"endColumn":38},{"ruleId":"460","severity":1,"message":"465","line":641,"column":27,"nodeType":"466","messageId":"467","endLine":641,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":649,"column":8,"nodeType":"464","messageId":"463","endLine":649,"endColumn":36},{"ruleId":"460","severity":1,"message":"465","line":649,"column":25,"nodeType":"466","messageId":"467","endLine":649,"endColumn":35},{"ruleId":"460","severity":1,"message":"461","line":693,"column":8,"nodeType":"464","messageId":"463","endLine":693,"endColumn":41},{"ruleId":"460","severity":1,"message":"465","line":693,"column":30,"nodeType":"466","messageId":"467","endLine":693,"endColumn":40},{"ruleId":"460","severity":1,"message":"461","line":753,"column":8,"nodeType":"464","messageId":"463","endLine":753,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":753,"column":26,"nodeType":"466","messageId":"467","endLine":753,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":800,"column":8,"nodeType":"464","messageId":"463","endLine":800,"endColumn":38},{"ruleId":"460","severity":1,"message":"465","line":800,"column":27,"nodeType":"466","messageId":"467","endLine":800,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":808,"column":8,"nodeType":"464","messageId":"463","endLine":808,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":808,"column":26,"nodeType":"466","messageId":"467","endLine":808,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":816,"column":8,"nodeType":"464","messageId":"463","endLine":816,"endColumn":42},{"ruleId":"460","severity":1,"message":"465","line":816,"column":31,"nodeType":"466","messageId":"467","endLine":816,"endColumn":41},{"ruleId":"460","severity":1,"message":"461","line":860,"column":8,"nodeType":"464","messageId":"463","endLine":860,"endColumn":49},{"ruleId":"460","severity":1,"message":"465","line":860,"column":38,"nodeType":"466","messageId":"467","endLine":860,"endColumn":48},{"ruleId":"460","severity":1,"message":"461","line":914,"column":8,"nodeType":"464","messageId":"463","endLine":914,"endColumn":41},{"ruleId":"460","severity":1,"message":"465","line":914,"column":30,"nodeType":"466","messageId":"467","endLine":914,"endColumn":40},{"ruleId":"460","severity":1,"message":"461","line":922,"column":8,"nodeType":"464","messageId":"463","endLine":922,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":922,"column":26,"nodeType":"466","messageId":"467","endLine":922,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":1031,"column":8,"nodeType":"464","messageId":"463","endLine":1031,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":1031,"column":26,"nodeType":"466","messageId":"467","endLine":1031,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":1072,"column":16,"nodeType":"464","messageId":"463","endLine":1072,"endColumn":46},{"ruleId":"460","severity":1,"message":"465","line":1072,"column":35,"nodeType":"466","messageId":"467","endLine":1072,"endColumn":45},{"ruleId":"460","severity":1,"message":"461","line":1080,"column":8,"nodeType":"464","messageId":"463","endLine":1080,"endColumn":38},{"ruleId":"460","severity":1,"message":"465","line":1080,"column":27,"nodeType":"466","messageId":"467","endLine":1080,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":1144,"column":8,"nodeType":"464","messageId":"463","endLine":1144,"endColumn":36},{"ruleId":"460","severity":1,"message":"465","line":1144,"column":25,"nodeType":"466","messageId":"467","endLine":1144,"endColumn":35},{"ruleId":"460","severity":1,"message":"461","line":1200,"column":8,"nodeType":"464","messageId":"463","endLine":1200,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":1200,"column":26,"nodeType":"466","messageId":"467","endLine":1200,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":1266,"column":8,"nodeType":"464","messageId":"463","endLine":1266,"endColumn":38},{"ruleId":"460","severity":1,"message":"465","line":1266,"column":27,"nodeType":"466","messageId":"467","endLine":1266,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":1274,"column":8,"nodeType":"464","messageId":"463","endLine":1274,"endColumn":37},{"ruleId":"460","severity":1,"message":"465","line":1274,"column":26,"nodeType":"466","messageId":"467","endLine":1274,"endColumn":36},{"ruleId":"460","severity":1,"message":"461","line":1282,"column":8,"nodeType":"464","messageId":"463","endLine":1282,"endColumn":40},{"ruleId":"460","severity":1,"message":"465","line":1282,"column":29,"nodeType":"466","messageId":"467","endLine":1282,"endColumn":39},{"ruleId":"460","severity":1,"message":"461","line":1330,"column":8,"nodeType":"464","messageId":"463","endLine":1330,"endColumn":42},{"ruleId":"460","severity":1,"message":"465","line":1330,"column":31,"nodeType":"466","messageId":"467","endLine":1330,"endColumn":41},{"ruleId":"460","severity":1,"message":"461","line":1401,"column":8,"nodeType":"464","messageId":"463","endLine":1401,"endColumn":42},{"ruleId":"460","severity":1,"message":"465","line":1401,"column":31,"nodeType":"466","messageId":"467","endLine":1401,"endColumn":41},{"ruleId":"468","severity":1,"message":"469","line":16,"column":25,"nodeType":"470","messageId":"471","endLine":16,"endColumn":43},{"ruleId":"460","severity":1,"message":"461","line":4,"column":22,"nodeType":"462","messageId":"463","endLine":4,"endColumn":27},{"ruleId":"460","severity":1,"message":"461","line":4,"column":16,"nodeType":"464","messageId":"463","endLine":4,"endColumn":33},{"ruleId":"460","severity":1,"message":"461","line":4,"column":24,"nodeType":"462","messageId":"463","endLine":4,"endColumn":29},{"ruleId":"460","severity":1,"message":"461","line":19,"column":28,"nodeType":"462","messageId":"463","endLine":19,"endColumn":33},{"ruleId":"460","severity":1,"message":"461","line":23,"column":32,"nodeType":"462","messageId":"463","endLine":23,"endColumn":47},{"ruleId":"460","severity":1,"message":"472","line":23,"column":33,"nodeType":"466","messageId":"467","endLine":23,"endColumn":43},{"ruleId":"460","severity":1,"message":"461","line":27,"column":34,"nodeType":"462","messageId":"463","endLine":27,"endColumn":39},{"ruleId":"460","severity":1,"message":"461","line":33,"column":5,"nodeType":"473","messageId":"463","endLine":33,"endColumn":31},{"ruleId":"460","severity":1,"message":"461","line":43,"column":26,"nodeType":"462","messageId":"463","endLine":43,"endColumn":72},{"ruleId":"460","severity":1,"message":"461","line":57,"column":30,"nodeType":"462","messageId":"463","endLine":57,"endColumn":41},{"ruleId":"460","severity":1,"message":"461","line":71,"column":26,"nodeType":"462","messageId":"463","endLine":71,"endColumn":31},{"ruleId":"460","severity":1,"message":"461","line":32,"column":26,"nodeType":"462","messageId":"463","endLine":32,"endColumn":37},{"ruleId":"460","severity":1,"message":"461","line":47,"column":35,"nodeType":"462","messageId":"463","endLine":47,"endColumn":132},{"ruleId":"460","severity":1,"message":"461","line":55,"column":27,"nodeType":"462","messageId":"463","endLine":55,"endColumn":48},{"ruleId":"460","severity":1,"message":"461","line":70,"column":25,"nodeType":"462","messageId":"463","endLine":70,"endColumn":50},{"ruleId":"460","severity":1,"message":"461","line":95,"column":27,"nodeType":"462","messageId":"463","endLine":95,"endColumn":52},{"ruleId":"460","severity":1,"message":"461","line":121,"column":26,"nodeType":"462","messageId":"463","endLine":121,"endColumn":61},{"ruleId":"460","severity":1,"message":"461","line":22,"column":25,"nodeType":"462","messageId":"463","endLine":22,"endColumn":73},{"ruleId":"468","severity":1,"message":"469","line":33,"column":97,"nodeType":"470","messageId":"471","endLine":33,"endColumn":127,"suggestions":"474"},{"ruleId":"460","severity":1,"message":"461","line":49,"column":27,"nodeType":"462","messageId":"463","endLine":49,"endColumn":52},{"ruleId":"460","severity":1,"message":"461","line":1,"column":22,"nodeType":"462","messageId":"463","endLine":1,"endColumn":38},{"ruleId":"468","severity":1,"message":"469","line":61,"column":48,"nodeType":"470","messageId":"471","endLine":61,"endColumn":66},{"ruleId":"468","severity":1,"message":"469","line":61,"column":193,"nodeType":"470","messageId":"471","endLine":61,"endColumn":214},{"ruleId":"468","severity":1,"message":"469","line":61,"column":230,"nodeType":"470","messageId":"471","endLine":61,"endColumn":255},{"ruleId":"468","severity":1,"message":"469","line":113,"column":67,"nodeType":"470","messageId":"471","endLine":113,"endColumn":88},{"ruleId":"468","severity":1,"message":"469","line":191,"column":117,"nodeType":"470","messageId":"471","endLine":191,"endColumn":142},{"ruleId":"468","severity":1,"message":"469","line":194,"column":26,"nodeType":"470","messageId":"471","endLine":194,"endColumn":51},{"ruleId":"468","severity":1,"message":"469","line":17,"column":24,"nodeType":"470","messageId":"471","endLine":17,"endColumn":45},{"ruleId":"460","severity":1,"message":"461","line":3,"column":16,"nodeType":"464","messageId":"463","endLine":3,"endColumn":57},{"ruleId":"460","severity":1,"message":"475","line":3,"column":36,"nodeType":"466","messageId":"476","endLine":3,"endColumn":45},{"ruleId":"460","severity":1,"message":"477","line":3,"column":47,"nodeType":"466","messageId":"476","endLine":3,"endColumn":56},{"ruleId":"460","severity":1,"message":"461","line":1,"column":8,"nodeType":"464","messageId":"463","endLine":1,"endColumn":46},{"ruleId":"460","severity":1,"message":"478","line":1,"column":32,"nodeType":"466","messageId":"467","endLine":1,"endColumn":45},{"ruleId":"460","severity":1,"message":"461","line":4,"column":8,"nodeType":"464","messageId":"463","endLine":4,"endColumn":48},{"ruleId":"460","severity":1,"message":"478","line":4,"column":34,"nodeType":"466","messageId":"467","endLine":4,"endColumn":47},{"ruleId":"460","severity":1,"message":"461","line":7,"column":8,"nodeType":"464","messageId":"463","endLine":7,"endColumn":49},{"ruleId":"460","severity":1,"message":"478","line":7,"column":35,"nodeType":"466","messageId":"467","endLine":7,"endColumn":48},{"ruleId":"460","severity":1,"message":"461","line":6,"column":8,"nodeType":"464","messageId":"463","endLine":6,"endColumn":41},{"ruleId":"460","severity":1,"message":"479","line":6,"column":29,"nodeType":"466","messageId":"467","endLine":6,"endColumn":40},{"ruleId":"460","severity":1,"message":"461","line":22,"column":31,"nodeType":"462","messageId":"463","endLine":22,"endColumn":64},{"ruleId":"460","severity":1,"message":"461","line":46,"column":37,"nodeType":"462","messageId":"463","endLine":46,"endColumn":48},{"ruleId":"460","severity":1,"message":"461","line":5,"column":17,"nodeType":"462","messageId":"463","endLine":5,"endColumn":32},{"ruleId":"460","severity":1,"message":"465","line":5,"column":18,"nodeType":"466","messageId":"467","endLine":5,"endColumn":28},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","Argument 'props' should be typed with a non-any type.","Identifier","anyTypedArg","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","Argument 'files' should be typed with a non-any type.","FunctionExpression",["480"],"Argument 'sourceDoc' should be typed.","missingArgType","Argument 'targetDoc' should be typed.","Argument 'enumType' should be typed with a non-any type.","Argument 'errors' should be typed with a non-any type.",{"messageId":"481","fix":"482","desc":"483"},"suggestOptionalChain",{"range":"484","text":"485"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",[1400,1401],"?"]