[{"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\rootstore.ts":"1","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\api\\agent.ts":"2","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\copyStyle.ts":"3","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\ChatContainer.tsx":"4","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\billing\\BillingInformation.tsx":"5","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskTimer.tsx":"6","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\TaskTable.tsx":"7","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavSearchInput.tsx":"8","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessagePage.tsx":"9","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\app\\App.tsx":"10","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryPage.tsx":"11","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskPage.tsx":"12","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Title-category.tsx":"13","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\authStore.tsx":"14","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\profileStore.tsx":"15","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryActions.tsx":"16","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskCreatorDetails.tsx":"17","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\ReceiverProfile.tsx":"18","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Preview.tsx":"19","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormImageUploader.tsx":"20","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsBottom.tsx":"21","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\bid.tsx":"22","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\PriceQueryForm.tsx":"23","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\AuthNavItems.tsx":"24","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ReviewSummary.tsx":"25","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidTable.tsx":"26","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\LanguageForm.tsx":"27","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\SocialsForm.tsx":"28","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\Navbar.tsx":"29","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\PublicProfilePage.tsx":"30","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\ProfilePage.tsx":"31","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\SEO.tsx":"32","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInForm.tsx":"33","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\ProfileReviews\\ProfileReviews.tsx":"34","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\ProfileTaskSection.tsx":"35","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\notification.ts":"36","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessageInput.tsx":"37","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\TaskItem.tsx":"38","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidModalDetails.tsx":"39","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\AccountBio.tsx":"40","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\notifications\\NotificationsPlaceholder.tsx":"41","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\chatStore.tsx":"42","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\ChatBox.tsx":"43","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\reportWebVitals.ts":"44","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidHistoryPage.tsx":"45","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\bidStore.tsx":"46","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\deliveryTypes.ts":"47","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavBottom.tsx":"48","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskTop.tsx":"49","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskBidItem.tsx":"50","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\LocationFinder.tsx":"51","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsTop.tsx":"52","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\MyProfile.tsx":"53","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\body\\MessageBodyContainer.tsx":"54","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ProfileBox.tsx":"55","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\TaskCardSlider.tsx":"56","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\account\\AccountForm.tsx":"57","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\home\\HomePage.tsx":"58","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\FullPageSpinner.tsx":"59","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\InlineLoader.tsx":"60","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryBody.tsx":"61","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskDetails.tsx":"62","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\ProfileTaskPlaceholder.tsx":"63","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\ProfileSettingsPage.tsx":"64","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\skill.tsx":"65","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\notifications\\NotificationsPage.tsx":"66","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\DescriptionForm.tsx":"67","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\orderStore.tsx":"68","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\checkout\\checkoutPage.tsx":"69","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\index.tsx":"70","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInPage.tsx":"71","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\PublicProfileStore.tsx":"72","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\category.ts":"73","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\RunnerChatTab.tsx":"74","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidAccordian.tsx":"75","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Rater.tsx":"76","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\TaskCard.tsx":"77","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\account\\AccountTab.tsx":"78","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\TaglineForm.tsx":"79","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\security\\SecurityForm.tsx":"80","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\taskStore.tsx":"81","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\TaskStatus.tsx":"82","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidInfo.tsx":"83","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsBottomPlaceholder.tsx":"84","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\TaskrChatTab.tsx":"85","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessagePagePlaceholder.tsx":"86","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\reviews\\TaskrReviews.tsx":"87","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\paging\\Pagination.tsx":"88","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\body\\TextMessage.tsx":"89","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskImages.tsx":"90","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskAssignedDetails.tsx":"91","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\InboxPage.tsx":"92","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavTop.tsx":"93","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\taskStatus.ts":"94","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormUploadedImagesPreview.tsx":"95","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myWatchlist\\WatchlistPage.tsx":"96","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ProfileReviews.tsx":"97","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessageTopBox.tsx":"98","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\BidForm.tsx":"99","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\appStore.tsx":"100","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\enumFunctions.tsx":"101","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\NotificationAlert.tsx":"102","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Separator.tsx":"103","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsTopPlaceholder.tsx":"104","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\ActiveTasks.tsx":"105","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\TagLine.tsx":"106","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\ChatsPlaceholder.tsx":"107","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myOrders\\Orders.tsx":"108","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myOrders\\ActiveOrders.tsx":"109","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\ProfileMenu.tsx":"110","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\getErrors.tsx":"111","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\OrdersPage.tsx":"112","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\OrderDetails.tsx":"113","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\orderStatus.ts":"114","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\orderInfo\\OrderInfo.tsx":"115","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\orderInfo\\OrderActivity.tsx":"116","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskDetailsForm.tsx":"117","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\SoftAlert.tsx":"118","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\icons\\Icons.tsx":"119","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\SkillsForm.tsx":"120","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Alert.tsx":"121","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\orderInfo\\OrderInfoDetails.tsx":"122","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\assets\\css\\chakra-ui-theme.ts":"123","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\security\\SecurityTab.tsx":"124","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Review.tsx":"125"},{"size":1240,"mtime":1614453777641,"results":"126","hashOfConfig":"127"},{"size":8994,"mtime":1614884161759,"results":"128","hashOfConfig":"127"},{"size":318,"mtime":1611077557281,"results":"129","hashOfConfig":"127"},{"size":1136,"mtime":1613641459235,"results":"130","hashOfConfig":"127"},{"size":943,"mtime":1612897079824,"results":"131","hashOfConfig":"127"},{"size":738,"mtime":1610275409302,"results":"132","hashOfConfig":"127"},{"size":4933,"mtime":1611482453899,"results":"133","hashOfConfig":"127"},{"size":2302,"mtime":1611485298934,"results":"134","hashOfConfig":"127"},{"size":1963,"mtime":1613981201231,"results":"135","hashOfConfig":"127"},{"size":3637,"mtime":1614715235004,"results":"136","hashOfConfig":"127"},{"size":1517,"mtime":1610351220877,"results":"137","hashOfConfig":"127"},{"size":3890,"mtime":1614537909916,"results":"138","hashOfConfig":"127"},{"size":6925,"mtime":1611149664872,"results":"139","hashOfConfig":"127"},{"size":3332,"mtime":1612969136210,"results":"140","hashOfConfig":"127"},{"size":8196,"mtime":1613226925656,"results":"141","hashOfConfig":"127"},{"size":4664,"mtime":1611171323680,"results":"142","hashOfConfig":"127"},{"size":4188,"mtime":1613917675818,"results":"143","hashOfConfig":"127"},{"size":1602,"mtime":1613853723712,"results":"144","hashOfConfig":"127"},{"size":956,"mtime":1611077701988,"results":"145","hashOfConfig":"127"},{"size":3929,"mtime":1610816256671,"results":"146","hashOfConfig":"127"},{"size":1986,"mtime":1613121278494,"results":"147","hashOfConfig":"127"},{"size":69,"mtime":1612475780015,"results":"148","hashOfConfig":"127"},{"size":2720,"mtime":1609262456322,"results":"149","hashOfConfig":"127"},{"size":4622,"mtime":1613513375176,"results":"150","hashOfConfig":"127"},{"size":1381,"mtime":1611684354728,"results":"151","hashOfConfig":"127"},{"size":2363,"mtime":1612511548568,"results":"152","hashOfConfig":"127"},{"size":3231,"mtime":1611859768658,"results":"153","hashOfConfig":"127"},{"size":6730,"mtime":1611859822550,"results":"154","hashOfConfig":"127"},{"size":588,"mtime":1610965734551,"results":"155","hashOfConfig":"127"},{"size":2506,"mtime":1613326747878,"results":"156","hashOfConfig":"127"},{"size":3609,"mtime":1614629995058,"results":"157","hashOfConfig":"127"},{"size":1946,"mtime":1610571843042,"results":"158","hashOfConfig":"127"},{"size":4466,"mtime":1610532359295,"results":"159","hashOfConfig":"127"},{"size":1436,"mtime":1613327151252,"results":"160","hashOfConfig":"127"},{"size":1126,"mtime":1613325377750,"results":"161","hashOfConfig":"127"},{"size":152,"mtime":1612000681944,"results":"162","hashOfConfig":"127"},{"size":2118,"mtime":1613719217234,"results":"163","hashOfConfig":"127"},{"size":3403,"mtime":1614523987370,"results":"164","hashOfConfig":"127"},{"size":6588,"mtime":1614454040395,"results":"165","hashOfConfig":"127"},{"size":7329,"mtime":1611859840620,"results":"166","hashOfConfig":"127"},{"size":2052,"mtime":1613927637138,"results":"167","hashOfConfig":"127"},{"size":5820,"mtime":1614884528377,"results":"168","hashOfConfig":"127"},{"size":2652,"mtime":1614075470760,"results":"169","hashOfConfig":"127"},{"size":425,"mtime":1607677411935,"results":"170","hashOfConfig":"127"},{"size":2386,"mtime":1613857862507,"results":"171","hashOfConfig":"127"},{"size":4679,"mtime":1614422183756,"results":"172","hashOfConfig":"127"},{"size":57,"mtime":1611149087400,"results":"173","hashOfConfig":"127"},{"size":2485,"mtime":1609666422717,"results":"174","hashOfConfig":"127"},{"size":3259,"mtime":1614522817603,"results":"175","hashOfConfig":"127"},{"size":2625,"mtime":1614539589134,"results":"176","hashOfConfig":"127"},{"size":3904,"mtime":1611054324932,"results":"177","hashOfConfig":"127"},{"size":4182,"mtime":1613202306047,"results":"178","hashOfConfig":"127"},{"size":1848,"mtime":1612646562080,"results":"179","hashOfConfig":"127"},{"size":1025,"mtime":1613828307361,"results":"180","hashOfConfig":"127"},{"size":2085,"mtime":1613118852401,"results":"181","hashOfConfig":"127"},{"size":1779,"mtime":1613215523315,"results":"182","hashOfConfig":"127"},{"size":23297,"mtime":1612896117857,"results":"183","hashOfConfig":"127"},{"size":1144,"mtime":1610306281019,"results":"184","hashOfConfig":"127"},{"size":248,"mtime":1609352810131,"results":"185","hashOfConfig":"127"},{"size":271,"mtime":1609353715022,"results":"186","hashOfConfig":"127"},{"size":1860,"mtime":1610307610747,"results":"187","hashOfConfig":"127"},{"size":2902,"mtime":1613858003828,"results":"188","hashOfConfig":"127"},{"size":4097,"mtime":1613326355252,"results":"189","hashOfConfig":"127"},{"size":2278,"mtime":1612943743947,"results":"190","hashOfConfig":"127"},{"size":80,"mtime":1611524207827,"results":"191","hashOfConfig":"127"},{"size":5361,"mtime":1613928562168,"results":"192","hashOfConfig":"127"},{"size":1691,"mtime":1611859825856,"results":"193","hashOfConfig":"127"},{"size":2487,"mtime":1614714960008,"results":"194","hashOfConfig":"127"},{"size":2539,"mtime":1614474565992,"results":"195","hashOfConfig":"127"},{"size":873,"mtime":1612638913198,"results":"196","hashOfConfig":"127"},{"size":2258,"mtime":1611786214717,"results":"197","hashOfConfig":"127"},{"size":1991,"mtime":1613208372451,"results":"198","hashOfConfig":"127"},{"size":133,"mtime":1611141765490,"results":"199","hashOfConfig":"127"},{"size":1510,"mtime":1613831547278,"results":"200","hashOfConfig":"127"},{"size":2777,"mtime":1612599809177,"results":"201","hashOfConfig":"127"},{"size":691,"mtime":1611682176899,"results":"202","hashOfConfig":"127"},{"size":2669,"mtime":1613328649705,"results":"203","hashOfConfig":"127"},{"size":2430,"mtime":1612895732709,"results":"204","hashOfConfig":"127"},{"size":1621,"mtime":1611859810799,"results":"205","hashOfConfig":"127"},{"size":5151,"mtime":1612970242407,"results":"206","hashOfConfig":"127"},{"size":5373,"mtime":1614518662575,"results":"207","hashOfConfig":"127"},{"size":631,"mtime":1614522384717,"results":"208","hashOfConfig":"127"},{"size":4809,"mtime":1612512400132,"results":"209","hashOfConfig":"127"},{"size":1666,"mtime":1613203032804,"results":"210","hashOfConfig":"127"},{"size":1463,"mtime":1613597120540,"results":"211","hashOfConfig":"127"},{"size":2423,"mtime":1613910108980,"results":"212","hashOfConfig":"127"},{"size":950,"mtime":1611873870810,"results":"213","hashOfConfig":"127"},{"size":964,"mtime":1609411308644,"results":"214","hashOfConfig":"127"},{"size":1475,"mtime":1613664673210,"results":"215","hashOfConfig":"127"},{"size":3047,"mtime":1614523564812,"results":"216","hashOfConfig":"127"},{"size":2220,"mtime":1614537421357,"results":"217","hashOfConfig":"127"},{"size":1217,"mtime":1613910425530,"results":"218","hashOfConfig":"127"},{"size":2420,"mtime":1614673009332,"results":"219","hashOfConfig":"127"},{"size":87,"mtime":1611321195156,"results":"220","hashOfConfig":"127"},{"size":1471,"mtime":1610721239863,"results":"221","hashOfConfig":"127"},{"size":7616,"mtime":1614693487636,"results":"222","hashOfConfig":"127"},{"size":1114,"mtime":1611871715394,"results":"223","hashOfConfig":"127"},{"size":951,"mtime":1613853246435,"results":"224","hashOfConfig":"127"},{"size":5343,"mtime":1611166930733,"results":"225","hashOfConfig":"127"},{"size":2236,"mtime":1613832001162,"results":"226","hashOfConfig":"127"},{"size":380,"mtime":1611148501315,"results":"227","hashOfConfig":"127"},{"size":2269,"mtime":1613930691489,"results":"228","hashOfConfig":"127"},{"size":234,"mtime":1609429211018,"results":"229","hashOfConfig":"127"},{"size":574,"mtime":1613116335194,"results":"230","hashOfConfig":"127"},{"size":4695,"mtime":1613519497759,"results":"231","hashOfConfig":"127"},{"size":1111,"mtime":1611859887411,"results":"232","hashOfConfig":"127"},{"size":5700,"mtime":1613519383901,"results":"233","hashOfConfig":"127"},{"size":1319,"mtime":1614630915934,"results":"234","hashOfConfig":"127"},{"size":3814,"mtime":1614897319834,"results":"235","hashOfConfig":"127"},{"size":1895,"mtime":1612882184524,"results":"236","hashOfConfig":"127"},{"size":468,"mtime":1610361256727,"results":"237","hashOfConfig":"127"},{"size":1455,"mtime":1614889198950,"results":"238","hashOfConfig":"127"},{"size":4108,"mtime":1614894924935,"results":"239","hashOfConfig":"127"},{"size":112,"mtime":1614716981639,"results":"240","hashOfConfig":"127"},{"size":1157,"mtime":1614888418606,"results":"241","hashOfConfig":"127"},{"size":5791,"mtime":1614887483895,"results":"242","hashOfConfig":"127"},{"size":16611,"mtime":1614878228403,"results":"243","hashOfConfig":"127"},{"size":347,"mtime":1610565679053,"results":"244","hashOfConfig":"127"},{"size":94787,"mtime":1614802665499,"results":"245","hashOfConfig":"127"},{"size":3081,"mtime":1611859788799,"results":"246","hashOfConfig":"127"},{"size":1038,"mtime":1609509530471,"results":"247","hashOfConfig":"127"},{"size":4696,"mtime":1614898357880,"results":"248","hashOfConfig":"127"},{"size":655,"mtime":1612250232817,"results":"249","hashOfConfig":"127"},{"size":1432,"mtime":1612971374189,"results":"250","hashOfConfig":"127"},{"size":1398,"mtime":1611871615943,"results":"251","hashOfConfig":"127"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bnsgpt",{"filePath":"254","messages":"255","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"259"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"259"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"272"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"290"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"278"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"265"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"313"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"338"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"313"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"313"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"334"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"278"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"284"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"338"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"259"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"262"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"284"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"272"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"296"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"290"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"259"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"334"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"284"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"284"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"284"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"278"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"262"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"278"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":94,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\rootstore.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\api\\agent.ts",["540","541","542","543","544"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\copyStyle.ts",["545","546","547"],"﻿// function to copy style into an external window\r\n// @ts-ignore\r\nexport default function copyStyles(sourceDoc, targetDoc) {\r\n    Array.from(\r\n        sourceDoc.querySelectorAll('link[rel=\"stylesheet\"], style')\r\n    ).forEach((link: any) => {\r\n        targetDoc.head.appendChild(link.cloneNode(true));\r\n    });\r\n}\r\n",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\ChatContainer.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\billing\\BillingInformation.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskTimer.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\TaskTable.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavSearchInput.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessagePage.tsx",["548","549"],"﻿import React, {useContext, useEffect} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Box, SimpleGrid, useMediaQuery} from \"@chakra-ui/react\";\r\nimport rootStoreContext from \"../../../application/stores/rootstore\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport MessageBox from \"./MessageBox\";\r\nimport ReceiverProfile from \"./ReceiverProfile\";\r\nimport {Link} from \"react-router-dom\";\r\nimport MessagePagePlaceholder from \"./MessagePagePlaceholder\";\r\nimport SEO from \"../../../application/appLayout/SEO\";\r\n\r\nconst MessagePage : React.FC<RouteComponentProps<{chatId: string}>> = ({match}) => {\r\n    const [isMobile] = useMediaQuery(\"(max-width: 600px)\");\r\n    const {chat, loadingChat, getChatById, createHubConnection, stopHubConnection} = useContext(rootStoreContext).chatStore;\r\n    const {user} = useContext(rootStoreContext).authStore;\r\n    \r\n    useEffect(() => {\r\n            getChatById(match.params.chatId).then((response) => createHubConnection(response!.id));\r\n            return () => stopHubConnection();\r\n    }, [match.params.chatId, getChatById, createHubConnection, stopHubConnection])\r\n    \r\n    return (\r\n        <Box className=\"container\">\r\n            <SEO title=\"My inbox\" />\r\n            <Box className=\"main\">\r\n                {!isMobile && <Link className=\"text__blue\" to=\"/inbox\">&#60; Back to my inbox</Link>}\r\n                {loadingChat || chat == null ? <MessagePagePlaceholder /> : \r\n                    <Box style={{marginTop: isMobile ? \"1em\" : \"2em\"}}>\r\n                    <SimpleGrid templateColumns={{xl: \"2fr 0.8fr\", lg: \"2fr 1fr\"}} spacing=\"20px\" >\r\n                    <MessageBox chat={chat} />\r\n                        {!isMobile && <ReceiverProfile user={chat.taskr.id === user!.id ? chat.runner : chat.taskr} /> }\r\n                </SimpleGrid>\r\n                    </Box>\r\n                        }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default observer(MessagePage);","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\app\\App.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryPage.tsx",["550"],"﻿import React, {useContext, useEffect} from \"react\";\r\nimport QueryActions from \"./QueryActions\";\r\nimport rootStoreContext from \"../../application/stores/rootstore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport InlineLoader from \"../../application/appLayout/InlineLoader\";\r\nimport QueryBody from \"./QueryBody\";\r\nimport {StringParam, useQueryParams} from \"use-query-params\";\r\n\r\nconst QueryPage = () => {\r\n    const {loadingInitial, tasks, getAllJobs, taskQueryValues, setTasksQueryParams} = useContext(rootStoreContext).taskStore;\r\n    const [queryParams] = useQueryParams({\r\n        title: StringParam,\r\n        city: StringParam\r\n    }) \r\n    \r\n    setTasksQueryParams(queryParams.title!);\r\n    useEffect(() => {\r\n        getAllJobs();\r\n    }, [getAllJobs, taskQueryValues, queryParams])\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"main\">\r\n                <div>\r\n                <h1 className=\"text__lg\">Results for {`\"${queryParams.title}\"`}</h1>\r\n                    <div className=\"query__body\">\r\n                    <QueryActions />\r\n                        {loadingInitial || tasks === null ? <InlineLoader /> : (\r\n                            <div>\r\n                                <QueryBody tasks={tasks} taskQueryValues={taskQueryValues}/>\r\n                            </div>\r\n                        )}                   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(QueryPage);","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskPage.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Title-category.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\authStore.tsx",["551","552","553","554","555","556"],"import {RootStore} from \"./rootstore\";\r\nimport {action, computed, makeObservable, observable, reaction, runInAction} from \"mobx\";\r\nimport {ISignInFormValues, IUser} from \"../../infrastructure/models/auth\";\r\nimport {AuthRequest} from \"../api/agent\";\r\nimport React from \"react\";\r\nimport Alert from \"../common/Alert\";\r\nimport {CheckmarkIcon, CloseIcon} from \"../../infrastructure/icons/Icons\";\r\nimport {toast} from \"react-toastify\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\nimport {history} from \"../../index\";\r\n\r\n// -------------------------------------------\r\n// Auth store for all auth actions\r\n// -------------------------------------------\r\n\r\nexport class AuthStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n        reaction(() => this.token, (token) => {\r\n            if(token){\r\n                // set the token value in local storage as soon as the token changes\r\n                localStorage.setItem(\"jwt\", token);\r\n            } else {\r\n                localStorage.removeItem(\"jwt\");\r\n            }\r\n        })\r\n    }\r\n    \r\n    @observable token : string | null = localStorage.getItem(\"jwt\");\r\n    @observable user : IUser | null = null;\r\n\r\n    \r\n    @computed get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    // ------------------------\r\n    // Actions\r\n    // ------------------------\r\n    \r\n    \r\n    // TODO - Login should refresh the page\r\n    @action signInUser = async (signInFormValues: ISignInFormValues) => {\r\n        try{\r\n            const signInResponse = await AuthRequest.signIn(signInFormValues);\r\n            localStorage.setItem(\"jwt\", signInResponse.token);\r\n            runInAction(() => {\r\n                this.user = signInResponse.user;\r\n                this.rootStore.appStore.setAppLoaded();\r\n            })\r\n        } catch(error){\r\n            toast.error(<Alert subject=\"Invalid credentials\" message=\"\" icon={<CloseIcon boxSize={8} color=\"#73000c\" />} type=\"error\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action getCurrentUser = async () => {\r\n        try{\r\n            const authResponse = await AuthRequest.getCurrentUser();\r\n            localStorage.setItem(\"jwt\", authResponse.token);\r\n            runInAction(() => {\r\n                this.user = authResponse.user;\r\n                this.rootStore.appStore.setAppLoaded();\r\n            })\r\n        } catch(error){\r\n            toast.error(<Alert subject=\"Error occurred\" message=\"Problem getting tasks\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} type=\"error\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action changePassword = async (values: any) => {\r\n        try{\r\n            await AuthRequest.changePassword(values);\r\n            runInAction(() => {\r\n                toast.success(<Alert type=\"success\" subject=\"Password changed\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"You will be logged out\" />);\r\n                history.push(\"/\");\r\n                this.logOutUser();\r\n            })\r\n        }catch(error){\r\n            alertErrors(error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action logOutUser = () => {\r\n        localStorage.removeItem(\"jwt\");\r\n        this.user = null;\r\n        window.location.reload();\r\n    }\r\n}",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\profileStore.tsx",["557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {ITask} from \"../../infrastructure/models/task\";\r\nimport {profileRequest} from \"../api/agent\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\nimport {TaskStatus} from \"../../infrastructure/enums/taskStatus\";\r\nimport {ILanguage, IPrivateProfile, ISkill, ISocials,} from \"../../infrastructure/models/profile\";\r\nimport {toast} from \"react-toastify\";\r\nimport {CheckmarkIcon} from \"../../infrastructure/icons/Icons\";\r\nimport Alert from \"../common/Alert\";\r\nimport React from \"react\";\r\nimport {IPaginatedNotificationsResponse} from \"../../infrastructure/models/notification\";\r\nimport {NotificationStatus} from \"../../infrastructure/enums/notification\";\r\n\r\nexport class ProfileStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n    @observable profileActiveTasks : ITask[] | null = null;\r\n    @observable profileInactiveTasks : ITask[] | null = null; \r\n    @observable loadingInitial = false;\r\n    @observable privateProfile : IPrivateProfile | null = null;\r\n    @observable userNotifications : IPaginatedNotificationsResponse | null = null;\r\n    @observable loadingNotifications = false;\r\n    @observable watchList : ITask[] | null = null;\r\n    @action getProfileTasks = async (taskStatus: TaskStatus) => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const tasks = await profileRequest.getAllTasks(taskStatus);\r\n            runInAction(() => {\r\n                switch (taskStatus) {\r\n                    case TaskStatus.Active:\r\n                        this.profileActiveTasks = tasks;\r\n                        break;\r\n                    case TaskStatus.InActive:\r\n                        this.profileInactiveTasks = tasks;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.loadingInitial = false;\r\n            })\r\n        }catch (errors) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    @observable getPrivateProfile = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n           const profile = await profileRequest.getProfile();\r\n           runInAction(() => {\r\n               this.privateProfile = profile;\r\n               this.loadingInitial = false;\r\n           })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @observable addProfileSkills = async (values: ISkill) => {\r\n        try{\r\n            await profileRequest.addProfileSkills(values);\r\n            runInAction(() => {\r\n                this.privateProfile!.skillSet.unshift(values);\r\n                toast.success(<Alert type=\"success\" subject=\"Skills Updated\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"\" />)\r\n            })\r\n        }catch (e){\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @observable addProfileLanguages = async (values: ILanguage) => {\r\n        try{\r\n            await profileRequest.addProfileLanguages(values);\r\n            runInAction(() => {\r\n                this.privateProfile!.languages.unshift(values);\r\n                toast.success(<Alert type=\"success\" subject=\"Languages Updated\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"\" />)\r\n            })\r\n        }catch (e){\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @observable updateProfile = async (values: any) => {\r\n        try{\r\n            await profileRequest.updateProfile(values);\r\n            runInAction(() => {\r\n                if(values.description){\r\n                    this.privateProfile!.bio = values.description;\r\n                }\r\n                if(values.tagline){\r\n                    this.privateProfile!.tagline = values.tagline;\r\n                }\r\n                \r\n\r\n                toast.success(<Alert type=\"success\" subject=\"Profile Updated\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"\" />)\r\n            })\r\n        }catch(e){\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @action updateSocials = async (values: ISocials) => {\r\n        try{\r\n            await profileRequest.updateSocials(values);\r\n            runInAction(() => {\r\n                if(values.twitter){\r\n                    this.privateProfile!.socials.twitter = values.twitter;\r\n                }\r\n                if(values.instagram){\r\n                    this.privateProfile!.socials.instagram = values.instagram;\r\n                }\r\n                if(values.facebook){\r\n                    this.privateProfile!.socials.facebook = values.facebook;\r\n                }\r\n                if(values.pinterest){\r\n                    this.privateProfile!.socials.pinterest = values.pinterest;\r\n                }\r\n\r\n                toast.success(<Alert type=\"success\" subject=\"Socials Updated\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"\" />)\r\n            })\r\n        }catch(e){\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @action getUserNotifications = async (status?: NotificationStatus) => {\r\n        this.loadingNotifications = true;\r\n        try{\r\n           const notifs = await profileRequest.getNotifications(status);\r\n           runInAction(() => {\r\n               this.userNotifications = notifs;\r\n               this.loadingNotifications = false;\r\n           })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingNotifications = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @action readNotification = async (notificationId: string) => {\r\n        try{\r\n            await profileRequest.markNotificationAsRead(notificationId);\r\n            runInAction(() => {\r\n                const notif = this.userNotifications?.data.find(x => x.id == notificationId);\r\n                notif!.status = NotificationStatus.Read;\r\n            })\r\n        }catch (errors){\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    @action deleteNotification = async (notificationId: string) => {\r\n        try{\r\n            await profileRequest.deleteNotification(notificationId);\r\n            runInAction(() => {\r\n               this.userNotifications!.data = this.userNotifications!.data.filter(x => x.id !== notificationId); \r\n            })\r\n        }catch (errors){\r\n            alertErrors(errors);\r\n            throw errors;\r\n        } \r\n    }\r\n    \r\n    @action markAllNotificationsAsRead = async () => {\r\n        try{\r\n            await profileRequest.markAllNotificationsAsRead();\r\n            runInAction(() => {\r\n               this.userNotifications?.data.forEach((notification) => {\r\n                   notification.status = NotificationStatus.Read;\r\n               }) \r\n                this.rootStore.authStore.user!.hasUnReadNotifications = false;\r\n            })\r\n        }catch (errors){\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    @action deleteAllNotifications = async () => {\r\n        try{\r\n            await profileRequest.deleteAllNotifications();\r\n            runInAction(() => {\r\n                this.userNotifications!.data = [];\r\n                this.rootStore.authStore.user!.hasUnReadNotifications = false;\r\n            })\r\n        }catch(errors){\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    @action getWatchlist = async (sortBy: string) => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const watchlist = await profileRequest.getWatchlist(sortBy);\r\n            runInAction(() => {\r\n                this.watchList = watchlist;\r\n                this.loadingInitial = false;\r\n            })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingInitial = false);\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n    \r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryActions.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskCreatorDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\ReceiverProfile.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\Preview.tsx",["584","585"],"﻿import { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport copyStyles from \"../../infrastructure/utils/copyStyle\";\r\n\r\nconst Preview = (props: any) => {\r\n    // create a new div element\r\n    const [containerEl] = useState(document.createElement('div'));\r\n    let externalWindow : any = null;\r\n\r\n    useEffect(() => {\r\n        externalWindow = window.open(\r\n            '',\r\n            '',\r\n            `width=1290,height=700,left=200,top=200`\r\n        );\r\n\r\n        copyStyles(document, externalWindow.document);\r\n\r\n        externalWindow.document.body.appendChild(containerEl);\r\n        externalWindow.addEventListener('beforeunload', () => {\r\n            props.closeWindow();\r\n        });\r\n        return function cleanup() {\r\n            externalWindow.close();\r\n            externalWindow = null;\r\n        };\r\n    }, []);\r\n\r\n    return ReactDOM.createPortal(props.children, containerEl);\r\n};\r\n\r\nexport default Preview;\r\n","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormImageUploader.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsBottom.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\bid.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\PriceQueryForm.tsx",["586"],"﻿import {FormControl, FormLabel, HStack, InputLeftElement, InputGroup, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, MenuDivider, Flex, Spacer } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst PriceQueryForm = () => {\r\n    return (\r\n        <form>\r\n            <div style={{padding: \"1em\"}}>\r\n            <HStack spacing=\"24px\">\r\n                <FormControl id=\"min\">\r\n                    <FormLabel className=\"query__price__label\">Min</FormLabel>\r\n                    <InputGroup>\r\n                        <InputLeftElement\r\n                            pointerEvents=\"none\"\r\n                            fontSize=\"1.2em\"\r\n                            className=\"query__price__placeholder\"\r\n                        >\r\n                            $\r\n                        </InputLeftElement>\r\n                        <NumberInput size=\"md\" defaultValue={0} precision={2} min={0}>\r\n                                <NumberInputField className=\"query__price__input\" />\r\n                            <NumberInputStepper>\r\n                                <NumberIncrementStepper />\r\n                                <NumberDecrementStepper />\r\n                            </NumberInputStepper>\r\n                        </NumberInput>\r\n                    </InputGroup>\r\n                </FormControl>\r\n                <FormControl id=\"max\">\r\n                    <FormLabel className=\"query__price__label\">Max</FormLabel>\r\n                    <InputGroup>\r\n                        <InputLeftElement\r\n                            pointerEvents=\"none\"\r\n                            fontSize=\"1.2em\"\r\n                            className=\"query__price__placeholder\"\r\n                        >\r\n                            $\r\n                        </InputLeftElement>\r\n                        <NumberInput size=\"md\" defaultValue={0} precision={2} min={0}>\r\n                            <NumberInputField className=\"query__price__input\" />\r\n                            <NumberInputStepper>\r\n                                <NumberIncrementStepper />\r\n                                <NumberDecrementStepper />\r\n                            </NumberInputStepper>\r\n                        </NumberInput>\r\n                    </InputGroup>\r\n                </FormControl> \r\n            </HStack>\r\n            </div>\r\n            <MenuDivider />\r\n            <Flex alignItems=\"center\" style={{padding: \"0 1em\"}}>\r\n                <button className=\"btn btn__none\">Clear All</button>\r\n                <Spacer />\r\n                <button className=\"btn btn__primary btn__sm\">Apply</button>\r\n            </Flex>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PriceQueryForm;",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\AuthNavItems.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ReviewSummary.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidTable.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\LanguageForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\SocialsForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\Navbar.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\PublicProfilePage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\ProfilePage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\SEO.tsx",["587"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInForm.tsx",[],[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\ProfileReviews\\ProfileReviews.tsx",["588"],"﻿import {Box, HStack, Tab, TabList, TabPanel, TabPanels, Tabs, useMediaQuery} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport TaskrReviews from \"../../profile/myProfile/reviews/TaskrReviews\";\nimport Rater from \"../../../application/common/Rater\";\n\nconst ProfileReviews = () => {\n    const [isMobile] = useMediaQuery(\"(max-width: 600px)\");\n    return (\n        <Box style={{marginTop: \"2em\"}}>\n            <HStack style={{marginTop: \"0.5em\"}} alignItems=\"center\" spacing=\"10px\">\n                <h1 className=\"text__heading text__darker\">Reviews</h1>\n                <Rater justifyContent=\"flex-start\" rating={4} boxSize={8} />\n                <h1 className=\"text__heading text__darker\">4.8</h1>\n                <p className=\"text__light__grey text__heading\">(2,860)</p>\n            </HStack>\n            <Tabs isFitted={isMobile} isLazy>\n                <TabList style={isMobile ? {width: \"100px\"} : {margin: \"0 auto\"}} className=\"profile__inner__tabs profile__review__tabs\">\n                    <Tab>As a Taskr</Tab>\n                    <Tab>As a Runner</Tab>\n                </TabList>\n\n                <TabPanels>\n                    <TabPanel>\n                        <Box className=\"task__bid__form__card\">\n                            <TaskrReviews />\n                        </Box>\n                    </TabPanel>\n                </TabPanels>\n            </Tabs>\n        </Box>\n    )\n}\n\nexport default ProfileReviews;",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\ProfileTaskSection.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\notification.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessageInput.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\TaskItem.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidModalDetails.tsx",["589","590"],"﻿import React, {useContext, useEffect, Fragment, useState} from \"react\";\r\nimport rootStoreContext from \"../../../application/stores/rootstore\";\r\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Button, Stack, Box, HStack, Image, VStack, Tooltip } from \"@chakra-ui/react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Loader from \"../../../application/appLayout/FullPageSpinner\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport Rater from \"../../../application/common/Rater\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\nimport {ITask} from \"../../../infrastructure/models/task\";\r\nimport {CheckmarkIcon, EyeIcon} from \"../../../infrastructure/icons/Icons\";\r\nimport {BidStatus} from \"../../../infrastructure/enums/bid\";\r\nimport {loadStripe} from \"@stripe/stripe-js/pure\";\r\n\r\ndayjs.extend(relativeTime);\r\n\r\ninterface IProps{\r\n    bidId: string;\r\n    onClose: any;\r\n    isOpen: any;\r\n    task: ITask\r\n}\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY!);\r\n\r\nconst BidModalDetails : React.FC<IProps> = ({bidId, onClose, isOpen, task}) => {\r\n    const {bid, getBidById, loadingBid, markingBidAsSeen, markBidAsSeen} = useContext(rootStoreContext).bidStore;\r\n    const {token} = useContext(rootStoreContext).authStore;\r\n    const {deleteOrderById} = useContext(rootStoreContext).orderStore;\r\n    const [message, setMessage] = useState(\"\");\r\n    \r\n    useEffect(() => {\r\n        isOpen && getBidById(bidId);\r\n        const query = new URLSearchParams(window.location.search);\r\n        if(query.get(\"success\")){\r\n            setMessage(\"Order placed! you will enjoy now\")\r\n        }\r\n        if (query.get(\"canceled\")) {\r\n            setMessage(\r\n                \"Order canceled -- continue to shop around and checkout when you're ready.\"\r\n            );\r\n        }\r\n    }, [getBidById, bidId, isOpen]);\r\n    \r\n    \r\n    \r\n    return (\r\n        <Modal scrollBehavior=\"inside\" size=\"lg\" motionPreset=\"slideInBottom\" isOpen={isOpen} onClose={onClose}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                {loadingBid || bid === null ? <Loader /> : (\r\n                    <Fragment>\r\n                <ModalHeader><p className=\"text__darker text__bigger__md\">{task.title}</p></ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody>\r\n                    {message}\r\n                   <Stack direction={[\"column\", \"row\"]} justifyContent=\"space-between\" alignItems={{xl: \"flex-end\", lg: \"flex-end\", sm: \"flex-start\"}}>\r\n                       <Box>\r\n                           <HStack spacing=\"10px\">\r\n                               <Image src={bid.bidCreator.avatar} alt=\"bidder-avatar\" borderRadius=\"full\" boxSize=\"60px\" />\r\n                               <Box style={{lineHeight: \"24px\"}}>\r\n                                   <Link to=\"/\" className=\"text__blue text__bigger__md\">{bid.bidCreator.userName}</Link>\r\n                                   <HStack spacing=\"10px\">\r\n                                   <Rater boxSize={6} rating={4} justifyContent=\"flex-start\" />\r\n                                   <p className=\"text__black\">4.0</p>\r\n                                       <p className=\"text__light__grey\">(2,804)</p>\r\n                                   </HStack>\r\n                                   <p className=\"text__light__grey\">Joined {dayjs(bid.bidCreator.createdAt).fromNow()}</p>\r\n                               </Box>\r\n                           </HStack>\r\n                       </Box>\r\n\r\n                       <VStack justifyContent={{xl: \"space-between\", md: \"space-between\", lg: \"space-between\", sm: \"flex-start\"}} alignItems=\"start\">\r\n                           <Tooltip hasArrow label=\"Let bidder know you have seen their bid but havent made a desicion yet\" style={{background: \"rgb(41, 43, 50)\", fontSize: \"0.8em\"}} color=\"#fff\" >\r\n                               {bid.status === BidStatus.Seen ? <p className=\"text__silent\">Marked as seen</p> :<Button isLoading={markingBidAsSeen} leftIcon={<EyeIcon />} variant=\"ghost\" className=\"btn btn__ghost\" onClick={() => markBidAsSeen(bid.id)}>\r\n                               Mark as seen\r\n                           </Button>}\r\n                           </Tooltip>\r\n                       <p className=\"text__darker\">Offer: <span className=\"text__green text__bigger__md text__bold\">${bid.price}</span></p>\r\n                       </VStack>\r\n                   </Stack> \r\n                    \r\n                    {bid.description ? <Box p=\"0.75em\" className=\"bid__description\">\r\n                        {bid.description} \r\n                </Box> : (\r\n                    <p className=\"text__silent text__italic\" >{bid.bidCreator.userName} didnt add a description</p>\r\n                    ) }\r\n                    <Box>\r\n                        <small className=\"text__light__grey\">{dayjs(bid.createdAt).fromNow()}</small>\r\n                    </Box>\r\n                </ModalBody>\r\n\r\n                <ModalFooter>\r\n                    <Button className=\"btn\" mr={3} onClick={onClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button onClick={async () => {\r\n                        const stripe = await stripePromise;\r\n                       const response = await fetch(`https://localhost:44351/api/v1/bids/accept/${task.id}/${bid.id}`, {\r\n                           method: \"POST\",\r\n                           headers: {\r\n                               \"Accept\": \"application/json\",\r\n                               \"Authorization\": \"Bearer \" + token,\r\n                               \"Content-Type\": \"application/json\"\r\n                           }\r\n                       });\r\n                        const session = await response.json();\r\n                        // When the customer clicks on the button, redirect them to Checkout.\r\n                        const result = await stripe!.redirectToCheckout({\r\n                            sessionId: session.checkoutSessionId,\r\n                        });\r\n                        \r\n                        if(result.error){\r\n                           await deleteOrderById(session.id); \r\n                        }\r\n\r\n                    }} type=\"button\" id=\"checkout-button\" role=\"link\" className=\"btn btn__green\" leftIcon={<CheckmarkIcon />}>Accept Bid and pay</Button>\r\n                </ModalFooter>\r\n                    </Fragment>\r\n                    )}\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(BidModalDetails);\r\n","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\AccountBio.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\notifications\\NotificationsPlaceholder.tsx",["591"],"﻿import {Box, SkeletonCircle, Skeleton, Divider, SimpleGrid} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst NotificationsPlaceholder = () => {\r\n    return (\r\n        <Box style={{width: \"inherit\"}}>\r\n                    <SimpleGrid alignItems=\"flex-start\" templateColumns=\"0.3fr 1.4fr\" className=\"notification__item\" spacing=\"10px\">\r\n                        <SkeletonCircle width=\"60px\" height=\"60px\" />\r\n                <div style={{width: \"100%\"}}>\r\n                    <Skeleton height=\"15px\" width=\"100%\" mb=\"1em\" />\r\n                    <Skeleton height=\"15px\" width=\"70%\" />\r\n                </div>\r\n                    </SimpleGrid>\r\n            <Divider />\r\n            <SimpleGrid alignItems=\"flex-start\" templateColumns=\"0.3fr 1.4fr\" className=\"notification__item\" spacing=\"10px\">\r\n                <SkeletonCircle width=\"60px\" height=\"60px\" />\r\n                <div style={{width: \"100%\"}}>\r\n                    <Skeleton height=\"15px\" width=\"100%\" mb=\"1em\" />\r\n                    <Skeleton height=\"15px\" width=\"70%\" />\r\n                </div>\r\n            </SimpleGrid>\r\n            <Divider />\r\n            <SimpleGrid alignItems=\"flex-start\" templateColumns=\"0.3fr 1.4fr\" className=\"notification__item\" spacing=\"10px\">\r\n                <SkeletonCircle width=\"60px\" height=\"60px\" />\r\n                <div style={{width: \"100%\"}}>\r\n                    <Skeleton height=\"15px\" width=\"100%\" mb=\"1em\" />\r\n                    <Skeleton height=\"15px\" width=\"70%\" />\r\n                </div>\r\n            </SimpleGrid>\r\n            <Divider />\r\n            <SimpleGrid alignItems=\"flex-start\" templateColumns=\"0.3fr 1.4fr\" className=\"notification__item\" spacing=\"10px\">\r\n                <SkeletonCircle width=\"60px\" height=\"60px\" />\r\n                <div style={{width: \"100%\"}}>\r\n                    <Skeleton height=\"15px\" width=\"100%\" mb=\"1em\" />\r\n                    <Skeleton height=\"15px\" width=\"70%\" />\r\n                </div>\r\n            </SimpleGrid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NotificationsPlaceholder;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\chatStore.tsx",["592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\ChatBox.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\reportWebVitals.ts",["621"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidHistoryPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\bidStore.tsx",["622","623","624","625","626","627","628","629"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {IBid, IBidSubmission} from \"../../infrastructure/models/bid\";\r\nimport {toast} from \"react-toastify\";\r\nimport {CheckmarkIcon, CloseIcon} from \"../../infrastructure/icons/Icons\";\r\nimport Alert from \"../common/Alert\";\r\nimport React from \"react\";\r\nimport {BidRequest} from \"../api/agent\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\nimport {BidStatus} from \"../../infrastructure/enums/bid\";\r\nimport {IOrder} from \"../../infrastructure/models/order\";\r\n\r\nexport class BidStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n   @observable bid: IBid | null = null;\r\n   @observable bids: IBid[] | null = null; \r\n   @observable loadingInitialBids = false; \r\n   @observable loadingBid = false;\r\n   @observable markingBidAsSeen = false;\r\n   @observable order: IOrder | null = null;\r\n   @observable acceptingBid = false;\r\n    \r\n    // Actions\r\n    @action createBid = async (values: IBidSubmission, jobId: string) => {\r\n        try{\r\n            const bid = await BidRequest.placeBid(values, jobId);\r\n            runInAction(() => {\r\n                this.bid = bid;\r\n                if(this.rootStore.taskStore.task) {\r\n                    this.rootStore.taskStore.task.bidsCount += 1;\r\n                    this.rootStore.taskStore.task.isBidActive = true;\r\n                }\r\n                if(this.rootStore.bidStore.bids){\r\n                    // find if a bid by the user exists\r\n                    const userBid = this.rootStore.bidStore.bids.find((bid) => bid.userName === this.rootStore.authStore.user!.username);\r\n                    if(userBid){\r\n                        userBid.price = bid.price;\r\n                        userBid.createdAt = bid.createdAt;\r\n                    } else {\r\n                        this.rootStore.bidStore.bids.unshift(bid);\r\n                    }\r\n                }\r\n                toast.success(<Alert type=\"success\" subject=\"Success\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"Successfully placed a bid\" />);\r\n            })\r\n        }catch(error){\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Error occurred while submitting bid\" />);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action getTaskBids = async (taskId: string) => {\r\n        this.loadingInitialBids = true;\r\n        try{\r\n            const taskBids = await BidRequest.getAllTaskBids(taskId);\r\n            runInAction(() => {\r\n                this.bids = taskBids;\r\n                this.loadingInitialBids = false;\r\n            })\r\n        }catch (error) {\r\n            runInAction(() => this.loadingInitialBids = false);\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Problem loading task bids\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action getBidById = async (bidId: string) => {\r\n        this.loadingBid = true;\r\n        try{\r\n            const bid = await BidRequest.getBidById(bidId);\r\n            runInAction(() => {\r\n                this.bid = bid;\r\n                this.loadingBid = false;\r\n            })\r\n        }catch(errors){\r\n            runInAction(() => this.loadingBid = false);\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    \r\n    @action markBidAsSeen = async (bidId: string) => {\r\n        this.markingBidAsSeen = true;\r\n        try{\r\n            await BidRequest.markBidAsSeen(bidId);\r\n            runInAction(() => {\r\n                this.bid!.status = BidStatus.Seen;\r\n                if(this.bids){\r\n                    const bid = this.bids.find(x => x.id === bidId);\r\n                    bid!.status = BidStatus.Seen;\r\n                }\r\n                this.markingBidAsSeen = false;\r\n            })\r\n        } catch(errors){\r\n            runInAction(() => this.markingBidAsSeen = false);\r\n            alertErrors(errors);\r\n            throw errors;\r\n        }\r\n    }\r\n    \r\n    @action acceptBidAndPay = async (bidId: string, jobId: string) => {\r\n        this.acceptingBid = true;\r\n        try{\r\n            const order = await BidRequest.AcceptBidAndPay(bidId, jobId);\r\n            runInAction(() => {\r\n                this.order = order;\r\n                this.acceptingBid = false;\r\n            })\r\n        }catch (e) {\r\n            runInAction(() => this.acceptingBid = false);\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\deliveryTypes.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavBottom.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskTop.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\TaskBidItem.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\LocationFinder.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsTop.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\MyProfile.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\body\\MessageBodyContainer.tsx",["630"],"﻿import React, {useEffect} from \"react\";\r\nimport {IChat} from \"../../../../infrastructure/models/chat\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport TextMessage from \"./TextMessage\";\r\n\r\ninterface IProps{\r\n    chat: IChat;\r\n}\r\n\r\nconst MessageBodyContainer : React.FC<IProps> = ({chat}) => {\r\n    // const messagesEnd = useRef<HTMLDivElement | null>(null);\r\n    const scrollToBottom = () => {\r\n        document.getElementById(\"messagesEnd\")!.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [chat.messages])\r\n    \r\n    return (\r\n        <Box className=\"message__body\">\r\n            {chat.messages.map((message) => (\r\n                <Box key={message.id}>\r\n                    <TextMessage message={message} />\r\n                </Box>\r\n            ))}\r\n            <div style={{ float:\"left\", clear: \"both\" }} id=\"messagesEnd\">\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default observer(MessageBodyContainer);","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ProfileBox.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\TaskCardSlider.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\account\\AccountForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\home\\HomePage.tsx",["631"],"﻿import { Box} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport {useMediaQuery} from \"@chakra-ui/react\";\r\nimport {RightArrowIcon} from \"../../infrastructure/icons/Icons\";\r\n\r\nconst HomePage = () => {\r\n    const [isMobile] = useMediaQuery(\"(max-width: 400px)\");\r\n    return (\r\n        <div>\r\n            <Box className=\"home__banner\">\r\n                <div className=\"container\">\r\n                    <div className=\"home__banner__container\">\r\n               <h1 className=\"home__banner__text\">The {isMobile ? \"No 1\": \"number one\"} online marketplace for delegating <i style={{fontWeight: \"initial\"}}>tasks</i></h1>\r\n                        <div className={isMobile ? \"\" : \"flexer\"}>\r\n                            <button className={isMobile ? \"btn btn__accent btn__shadow btn__bg btn__full-width\" : \"btn btn__primary btn__shadow btn__bg \"}>Become a runner</button>\r\n                            <p className=\"home__banner__learn\">Learn more <RightArrowIcon boxSize={8} /></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\FullPageSpinner.tsx",["632"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\appLayout\\InlineLoader.tsx",["633"],"import { Spinner } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst InlineLoader = () => {\r\n    return (\r\n        <div className=\"spinner__inline\">\r\n            <Spinner size=\"xl\" color=\"brand.200\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InlineLoader;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\search\\QueryBody.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\ProfileTaskPlaceholder.tsx",["634"],"import React from \"react\";\nimport {Box, Divider, Grid, HStack, Skeleton, SkeletonCircle} from \"@chakra-ui/react\";\n\nconst ProfileTaskPlaceholder = () => {\n    return (\n        <Box>\n            <Skeleton mb={5} width=\"150px\" height=\"20px\" />\n            <Grid templateColumns={{xl: \"repeat(3, 1fr)\", lg: \"repeat(3, 1fr)\", md: \"repeat(2, 1fr)\", sm:\"1fr\"}} gap={7}>\n                <Box className=\"task__bid__form__card\" style={{marginBottom: \"0\", padding: \"0\", borderRadius: \"0\", position: \"relative\"}}>\n                   <Skeleton height=\"158px\" />\n                    <Box style={{padding: \"10px 15px\"}}>\n                        <HStack spacing=\"10px\">\n                            <SkeletonCircle width=\"30px\" height=\"30px\" />\n                            <Skeleton width=\"80%\" height=\"20px\" />\n                        </HStack>\n                        <Box mt={4}>\n                            <Skeleton height=\"20px\" />\n                        </Box>\n\n                        <Box mt={4}>\n                            <Skeleton mb={3} height=\"10px\" width=\"100px\" />\n                            <Skeleton height=\"10px\" width=\"100px\" />\n                        </Box>\n                    </Box>\n                    <Divider mt={2} mb={1} />\n                    <Box style={{padding: \"5px 15px\"}}>\n                        <HStack justifyContent=\"space-between\">\n                            <Skeleton height=\"20px\" width=\"100px\" />\n                            <Skeleton height=\"20px\" width=\"100px\" />\n                        </HStack>\n                    </Box>\n                </Box>\n                <Box className=\"task__bid__form__card\" style={{marginBottom: \"0\", padding: \"0\", borderRadius: \"0\", position: \"relative\"}}>\n                    <Skeleton height=\"158px\" />\n                    <Box style={{padding: \"10px 15px\"}}>\n                        <HStack spacing=\"10px\">\n                            <SkeletonCircle width=\"30px\" height=\"30px\" />\n                            <Skeleton width=\"80%\" height=\"20px\" />\n                        </HStack>\n                        <Box mt={4}>\n                            <Skeleton height=\"20px\" />\n                        </Box>\n\n                        <Box mt={4}>\n                            <Skeleton mb={3} height=\"10px\" width=\"100px\" />\n                            <Skeleton height=\"10px\" width=\"100px\" />\n                        </Box>\n                    </Box>\n                    <Divider mt={2} mb={1} />\n                    <Box style={{padding: \"5px 15px\"}}>\n                        <HStack justifyContent=\"space-between\">\n                            <Skeleton height=\"20px\" width=\"100px\" />\n                            <Skeleton height=\"20px\" width=\"100px\" />\n                        </HStack>\n                    </Box>\n                </Box>\n                <Box className=\"task__bid__form__card\" style={{marginBottom: \"0\", padding: \"0\", borderRadius: \"0\", position: \"relative\"}}>\n                    <Skeleton height=\"158px\" />\n                    <Box style={{padding: \"10px 15px\"}}>\n                        <HStack spacing=\"10px\">\n                            <SkeletonCircle width=\"30px\" height=\"30px\" />\n                            <Skeleton width=\"80%\" height=\"20px\" />\n                        </HStack>\n                        <Box mt={4}>\n                            <Skeleton height=\"20px\" />\n                        </Box>\n\n                        <Box mt={4}>\n                            <Skeleton mb={3} height=\"10px\" width=\"100px\" />\n                            <Skeleton height=\"10px\" width=\"100px\" />\n                        </Box>\n                    </Box>\n                    <Divider mt={2} mb={1} />\n                    <Box style={{padding: \"5px 15px\"}}>\n                        <HStack justifyContent=\"space-between\">\n                            <Skeleton height=\"20px\" width=\"100px\" />\n                            <Skeleton height=\"20px\" width=\"100px\" />\n                        </HStack>\n                    </Box>\n                </Box>\n            </Grid>\n        </Box>\n)\n}\n\nexport default ProfileTaskPlaceholder;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\ProfileSettingsPage.tsx",["635","636","637"],"﻿import React, {useContext, useEffect} from \"react\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport { Box, SimpleGrid, Tabs, TabList, TabPanels, TabPanel, Tab } from \"@chakra-ui/react\";\r\nimport AccountTab from \"./account/AccountTab\";\r\nimport rootStoreContext from \"../../../application/stores/rootstore\";\r\nimport Loader from \"../../../application/appLayout/FullPageSpinner\";\r\nimport BillingInformation from \"./billing/BillingInformation\";\r\nimport SecurityTab from \"./security/SecurityTab\";\r\n\r\nconst ProfileSettingsPage = () => {\r\n    const {user} = useContext(rootStoreContext).authStore;\r\n    const {privateProfile, getPrivateProfile, loadingInitial} = useContext(rootStoreContext).profileStore;\r\n    useEffect(() => {\r\n        if(privateProfile === null){\r\n            getPrivateProfile();\r\n        }\r\n    }, [getPrivateProfile, privateProfile])\r\n    if(loadingInitial || privateProfile === null) return <Loader />\r\n    return (\r\n        <Box className=\"settings__container\">\r\n            <Box className=\"main\">\r\n                <Tabs isLazy>\r\n                <SimpleGrid templateColumns={{xl: \"0.5fr 2fr\", lg: \"0.5fr 2fr\", md: \"0.8fr 2fr\", sm: \"1fr\"}} spacing=\"2em\">\r\n             <Box>\r\n                 <TabList className=\"settings__tab__list\">\r\n                     <Tab>Account</Tab>\r\n                     <Tab>Billing Information</Tab>\r\n                     <Tab>Security</Tab>\r\n                     <Tab>Other</Tab>\r\n                 </TabList>\r\n             </Box>\r\n                    <Box>\r\n                      <TabPanels>\r\n                          <TabPanel className=\"settings__tab__panel\"><AccountTab user={user!} privateProfile={privateProfile} /></TabPanel>\r\n                          <TabPanel className=\"settings__tab__panel\"><BillingInformation user={user!} privateProfile={privateProfile} /></TabPanel>\r\n                          <TabPanel className=\"settings__tab__panel\"><SecurityTab user={user!} privateProfile={privateProfile} /></TabPanel>\r\n                          <TabPanel className=\"settings__tab__panel\">apple</TabPanel>\r\n                      </TabPanels>  \r\n                    </Box>\r\n                </SimpleGrid>\r\n                </Tabs>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileSettingsPage);","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\skill.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\notifications\\NotificationsPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\DescriptionForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\orderStore.tsx",["638","639","640","641"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeAutoObservable, observable, runInAction} from \"mobx\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\nimport {OrderRequest} from \"../api/agent\";\r\nimport {IOrder} from \"../../infrastructure/models/order\";\r\n\r\nexport class OrderStore{\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    @observable confirmingOrder = false;\r\n    @observable loadingOrders = false;\r\n    @observable activeOrders : IOrder[] | null = null;\r\n    @observable order : IOrder | null = null;\r\n    \r\n    @action deleteOrderById = async (orderNumber: string) => {\r\n        try{\r\n            await OrderRequest.deleteOrderByNumber(orderNumber);\r\n        } catch (e) {\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n    \r\n    @action confirmOrderByNumber = async (orderNumber: string) => {\r\n        this.confirmingOrder = true;\r\n        try{\r\n            await OrderRequest.confirmOrderByNumber(orderNumber);\r\n            runInAction(() => {\r\n                this.confirmingOrder = false;\r\n            })\r\n        }catch (e) {\r\n            runInAction(() => this.confirmingOrder = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @action getAllOrders = async (predicate: string) => {\r\n        this.loadingOrders = true;\r\n        try{\r\n            const orders = await OrderRequest.getAllOrders(predicate);\r\n            runInAction(() => {\r\n                switch (predicate) {\r\n                    case \"ACTIVE\":\r\n                        this.activeOrders = orders;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.loadingOrders = false;\r\n            })\r\n        }catch (e) {\r\n           runInAction(() => this.loadingOrders = false);\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n    \r\n    @action getOrderByNumber = async (orderNumber: string) => {\r\n        this.loadingOrders = true;\r\n        try{\r\n            const order = await OrderRequest.getOrderByNumber(orderNumber);\r\n            runInAction(() => {\r\n                this.order = order;\r\n                this.loadingOrders = false;\r\n            })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingOrders = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\checkout\\checkoutPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\index.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\auth\\signin\\SignInPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\PublicProfileStore.tsx",["642","643"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {IPublicProfile} from \"../../infrastructure/models/profile\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\nimport {PublicProfileRequest} from \"../api/agent\";\r\nimport {ITask} from \"../../infrastructure/models/task\";\r\n\r\nexport class PublicProfileStore {\r\n    rootStore: RootStore\r\n\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n    @observable loadingProfileDetails  = false;\r\n    @observable publicProfileDetails : IPublicProfile | null = null;\r\n    @observable publicProfileTasks : ITask[] | null = null;\r\n    @observable loadingProfileTasks = false;\r\n    \r\n    @action getPublicProfileDetails = async (userId: string) => {\r\n        this.loadingProfileDetails = true;\r\n        try{\r\n            const details = await PublicProfileRequest.getPublicProfileDetails(userId);\r\n            runInAction(() => {\r\n                this.publicProfileDetails = details;\r\n                if(this.rootStore.authStore.user?.id === this.publicProfileDetails.id){\r\n                    this.publicProfileDetails.isUser = true;\r\n                }\r\n                this.loadingProfileDetails = false;\r\n            })\r\n        }catch (e) {\r\n           runInAction(() => this.loadingProfileDetails = false);\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n    \r\n    @action getPublicProfileTasks = async (userId: string) => {\r\n        this.loadingProfileTasks = true;\r\n        try{\r\n            const tasks = await PublicProfileRequest.getPublicProfileTasks(userId);\r\n            runInAction(() => {\r\n                this.publicProfileTasks = tasks;\r\n                this.loadingProfileTasks = false;\r\n            })\r\n        }catch (e) {\r\n           runInAction(() => this.loadingProfileTasks = false);\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\category.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\RunnerChatTab.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidAccordian.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Rater.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileTasks\\TaskCard.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\account\\AccountTab.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\TaglineForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\security\\SecurityForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\taskStore.tsx",["644","645","646","647","648","649"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable, runInAction} from \"mobx\";\r\nimport {ITaskQueryValues, IPaginatedTaskResponse, ITask} from \"../../infrastructure/models/task\";\r\nimport {JobRequest} from \"../api/agent\";\r\nimport {toast} from \"react-toastify\";\r\nimport Alert from \"../common/Alert\";\r\nimport {CheckmarkIcon, CloseIcon} from \"../../infrastructure/icons/Icons\";\r\nimport React from \"react\";\r\nimport {alertErrors} from \"../../infrastructure/utils/getErrors\";\r\n\r\n//---------------------------------------------------------\r\n// Store for all Job related actions\r\n//---------------------------------------------------------\r\n\r\nexport class TaskStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        makeObservable(this);\r\n        this.rootStore = rootStore;\r\n    }\r\n    \r\n    @observable tasks: IPaginatedTaskResponse | null = null;\r\n    @observable loadingInitial = false;\r\n    @observable taskQueryValues: ITaskQueryValues = {title: \"\", pageNumber: 1, pageSize: 20, maxPrice: 0, minPrice: 0};\r\n    @observable task: ITask | null = null;\r\n    @observable watching = false;\r\n    \r\n    // ------------------------\r\n    // Actions\r\n    // ------------------------\r\n    \r\n    @action getAllJobs = async () => {\r\n        this.loadingInitial = true;\r\n        try{\r\n            const paginatedJobResponse = await JobRequest.getAllTasks(this.taskQueryValues);\r\n            runInAction(() => {\r\n                this.tasks = paginatedJobResponse;\r\n                this.loadingInitial = false;\r\n            })\r\n        }catch (e) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Problem loading tasks\" />)\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    @action setTasksQueryParams = (title?: string, maxPrice?: number, minPrice?: number, pageNumber?: number, pageSize?: number) => {\r\n        this.taskQueryValues.title = title ? title : \"\";\r\n        this.taskQueryValues.maxPrice = maxPrice ? maxPrice : 0;\r\n        this.taskQueryValues.minPrice = minPrice ? minPrice : 0 ; \r\n        this.taskQueryValues.pageNumber = pageNumber ? pageNumber : 1;\r\n        this.taskQueryValues.pageSize = pageSize ? pageSize : 20;\r\n    }\r\n    \r\n    @action getTaskById = async (id: string) => {\r\n        this.loadingInitial = true;\r\n        try{\r\n          const taskResponse = await JobRequest.getTaskById(id);\r\n          runInAction(() => {\r\n              this.task = taskResponse;\r\n              if(this.rootStore.authStore.user?.id === this.task.creator.id){\r\n                  this.task.isOwner = true;\r\n              }\r\n              this.loadingInitial = false;\r\n          })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingInitial = false);\r\n            toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message=\"Problem loading task\" />)\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    @action watchTask = async (taskId: string) => {\r\n        this.watching = true;\r\n        try{\r\n            await JobRequest.watchTask(taskId);\r\n            await runInAction(async () => {\r\n                if(this.tasks){\r\n                    const watchedTask = await this.tasks.data.find((task) => task.id === taskId);\r\n                    if(watchedTask !== undefined){\r\n                        watchedTask.isWatching = true;\r\n                    }\r\n                }\r\n                if(this.task){\r\n                    this.task.isWatching = true;\r\n                    this.task.watchCount++;\r\n                }\r\n                \r\n                this.watching = false;\r\n            })\r\n        } catch(e){\r\n            runInAction(() => this.watching = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    @action unWatchTask = async (taskId: string) => {\r\n        this.watching = true;\r\n        try{\r\n            await JobRequest.unwatchTask(taskId);\r\n            await runInAction(async () => {\r\n                if(this.tasks){\r\n                    const watchedTask = await this.tasks.data.find((task) => task.id === taskId);\r\n                    if(watchedTask !== undefined){\r\n                        watchedTask.isWatching = false;\r\n                    }\r\n                }\r\n                if(this.task){\r\n                    this.task.isWatching = false;\r\n                    this.task.watchCount--;\r\n                }\r\n                \r\n                if(this.rootStore.profileStore.watchList){\r\n                    this.rootStore.profileStore.watchList = this.rootStore.profileStore.watchList.filter(x => x.id !== taskId);\r\n                }\r\n\r\n                this.watching = false;\r\n            })\r\n        } catch(e){\r\n            runInAction(() => this.watching = false);\r\n            alertErrors(e);\r\n            throw e;\r\n        }\r\n    }\r\n    \r\n    \r\n    @action createTask = async (taskSubmission: FormData) => {\r\n        try{\r\n            await JobRequest.createTask(taskSubmission);\r\n            toast.success(<Alert type=\"success\" subject=\"Task created\" icon={<CheckmarkIcon boxSize={8} color=\"#224a23\" />} message=\"Your task has been created & activated\" />)\r\n        }catch (e) {\r\n           alertErrors(e);\r\n           throw e;\r\n        }\r\n    }\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\TaskStatus.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\bidHistory\\BidInfo.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsBottomPlaceholder.tsx",["650"],"﻿import {Box, Divider, Skeleton} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst ProfileDetailsBottomPlaceholder = () => {\r\n    return (\r\n        <Box className=\"task__bid__form__card\">\r\n            <Box>\r\n                <Skeleton width=\"100px\" height=\"20px\" />\r\n                \r\n                <Box mt={5}>\r\n                <Skeleton mt={5} height=\"20px\" />\r\n                <Skeleton mt={5} height=\"20px\" />\r\n                <Skeleton mt={5} height=\"20px\" />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Divider mt={6} mb={6} />\r\n            \r\n            <Box>\r\n                <Skeleton width=\"100px\" height=\"20px\" />\r\n\r\n                <Box mt={5}>\r\n                    <Skeleton mt={5} height=\"20px\" />\r\n                    <Skeleton mt={5} height=\"20px\" />\r\n                    <Skeleton mt={5} height=\"20px\" />\r\n                </Box> \r\n            </Box>\r\n\r\n            <Divider mt={6} mb={6} />\r\n            \r\n            <Box>\r\n                <ul className=\"profile__skill__list\">\r\n                    <li className=\"profile__skill__label\"><Skeleton width=\"70px\" height=\"15px\" /></li>\r\n                    <li className=\"profile__skill__label\"><Skeleton width=\"70px\" height=\"15px\" /></li>\r\n                    <li className=\"profile__skill__label\"><Skeleton width=\"70px\" height=\"15px\" /></li>\r\n                    <li className=\"profile__skill__label\"><Skeleton width=\"70px\" height=\"15px\" /></li>\r\n                    <li className=\"profile__skill__label\"><Skeleton width=\"70px\" height=\"15px\" /></li>\r\n                </ul>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ProfileDetailsBottomPlaceholder;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\TaskrChatTab.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessagePagePlaceholder.tsx",["651"],"﻿import React from \"react\";\r\nimport {Box, SimpleGrid, StackDivider, useMediaQuery, VStack, Skeleton, HStack, Spinner} from \"@chakra-ui/react\";\r\n\r\nconst MessagePagePlaceholder = () => {\r\n    const [isMobile] = useMediaQuery(\"(max-width: 600px)\");\r\n    return (\r\n        <Box>\r\n            <Box style={{marginTop: isMobile ? \"1em\" : \"3em\"}}>\r\n                <SimpleGrid templateColumns={{xl: \"2fr 0.8fr\", lg: \"2fr 1fr\"}} spacing=\"20px\" >\r\n                    <Box>\r\n                    <VStack\r\n                        divider={<StackDivider borderColor=\"gray.200\" />}\r\n                        spacing={0}\r\n                        align=\"stretch\"\r\n                        className=\"task__bid__form__card no__padding message__container\"\r\n                    >\r\n                        <Box className=\"message__top\">\r\n                            <HStack spacing=\"20px\">\r\n                                <Skeleton height=\"70px\" width=\"20%\" />\r\n                                <Box style={{width: \"100%\"}}>\r\n                                    <Skeleton width=\"80%\" mb={6} height=\"20px\" />\r\n                                    <Skeleton width=\"30%\" height=\"20px\" />\r\n                                </Box>\r\n                            </HStack>\r\n                        </Box>\r\n                        <Box className=\"message__body\">\r\n                            <Box className=\"middle_position\">\r\n                                <Spinner color=\"brand.100\" size=\"xl\" />\r\n                            </Box>\r\n                        </Box>\r\n                        <Box className=\"message__bottom\">\r\n                            <Box className=\"message__input__box\">\r\n                            <Skeleton width=\"100%\" height=\"50px\" />\r\n                            </Box>\r\n                        </Box>\r\n                    </VStack>\r\n                    </Box>\r\n                    \r\n                    <Box className=\"task__bid__form__card\" style={{height: \"fit-content\"}}>\r\n                        <Skeleton width=\"40%\" height=\"20px\" style={{margin: \"0 auto 20px auto\"}} />\r\n                        <Skeleton width=\"80%\" height=\"20px\" style={{margin: \"0 auto 20px auto\"}} />\r\n                        <Skeleton width=\"100%\" height=\"20px\" style={{margin: \"0 auto 20px auto\"}} />\r\n                    </Box>\r\n                </SimpleGrid>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default MessagePagePlaceholder;","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\reviews\\TaskrReviews.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\paging\\Pagination.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\body\\TextMessage.tsx",["652","653","654","655","656"],"﻿import React, {useContext} from \"react\";\r\nimport {IMessage} from \"../../../../infrastructure/models/chat\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport { Box, HStack, Image } from \"@chakra-ui/react\";\r\nimport rootStoreContext from \"../../../../application/stores/rootstore\";\r\nimport dayjs from \"dayjs\";\r\nimport relativeTime from \"dayjs/plugin/relativeTime\";\r\n\r\ndayjs.extend(relativeTime);\r\n\r\n\r\ninterface IProps{\r\n    message: IMessage\r\n}\r\n\r\nconst TextMessage : React.FC<IProps> = ({message}) => {\r\n    const {user} = useContext(rootStoreContext).authStore;\r\n    return (\r\n        <HStack style={{marginTop: \"1.5em\"}} justifyContent={user!.id === message.sender.id ? \"flex-end\" : \"flex-start\"}>\r\n            <Box>\r\n                <HStack spacing=\"8px\" alignItems=\"flex-end\">\r\n                    {user!.id !== message.sender.id && <Image src={message.sender.avatar} alt=\"sender-avatar\" className=\"avatar avatar__message\" />}\r\n        <Box className={`message__text ${user!.id === message.sender.id ? \"message__text__outgoing\" : \"message__text__incoming\"}`}>\r\n            {message.text}\r\n        </Box>\r\n                </HStack>\r\n                <small className=\"text__nt text__bold\" style={{textAlign: user!.id === message.sender.id ? \"right\" : \"left\", display: \"block\", marginLeft: user!.id !== message.sender.id ? \"38px\" : \"auto\" }}>{dayjs(message.sentAt).fromNow()}</small>\r\n            </Box>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport default observer(TextMessage)","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskImages.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\task\\TaskAssignedDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\InboxPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\NavTop.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\taskStatus.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskFormUploadedImagesPreview.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myWatchlist\\WatchlistPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\ProfileReviews.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\messages\\MessageTopBox.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\bid\\BidForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\stores\\appStore.tsx",["657","658","659","660","661","662","663","664","665","666"],"﻿import {RootStore} from \"./rootstore\";\r\nimport {action, makeObservable, observable} from \"mobx\";\r\nimport React from \"react\";\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\r\nimport {INotification} from \"../../infrastructure/models/notification\";\r\nimport {toast} from \"react-toastify\";\r\nimport NotificationAlert from \"../common/NotificationAlert\";\r\n\r\n//-----------------------------------------------\r\n// General store for application\r\n//------------------------------------------------\r\n\r\nexport class AppStore{\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        makeObservable(this);\r\n    }\r\n    \r\n    @observable.ref notificationHubConnection : HubConnection | null = null;\r\n    @observable appLoaded = false;\r\n    @observable uploadedTaskFormFiles : any[] = [];\r\n    \r\n    \r\n    @action createNotificationHubConnection = () => {\r\n        this.notificationHubConnection = new HubConnectionBuilder().withUrl(\"https://localhost:44351/notif\", {\r\n            accessTokenFactory : () => this.rootStore.authStore.token!\r\n        }).configureLogging(LogLevel.Information).withAutomaticReconnect().build();\r\n        \r\n        // start the connection\r\n        this.notificationHubConnection.start().then(() => console.log(this.notificationHubConnection!.state))\r\n        \r\n        this.notificationHubConnection.on(\"ReceiveNotification\", (notification: INotification) => {\r\n            this.rootStore.authStore.user!.hasUnReadNotifications = true;\r\n                toast(<NotificationAlert data={notification} />, {\r\n                    position: \"top-right\",\r\n                    className: \"notification\",\r\n                    hideProgressBar: true,\r\n                })\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n   \r\n    \r\n    @action stopHubConnection = () => {\r\n        this.notificationHubConnection!.stop().catch((err) => console.log(err));\r\n    }\r\n    \r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n    \r\n    @action setPreviewImages = (files: any) => {\r\n        this.uploadedTaskFormFiles = files;\r\n    }\r\n    \r\n   @action removePreviewImages = () => {\r\n        this.uploadedTaskFormFiles = [];\r\n   } \r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\enumFunctions.tsx",["667","668","669","670","671","672"],"﻿export function getAllEnumKeys(enumType: any){\r\n    return Object.keys(enumType).filter(key => isNaN(Number(key)))\r\n}\r\nexport function getAllEnumValues(enumType: any) {\r\n    return getAllEnumKeys(enumType).map((key: any) => enumType[key])\r\n}\r\nexport function getAllEnumEntries(enumType: any) {\r\n    return getAllEnumKeys(enumType).map((key : any) => [key, enumType[key]])\r\n}   ","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\NotificationAlert.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Separator.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\publicProfile\\profileDetails\\ProfileDetailsTopPlaceholder.tsx",["673"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myTasks\\ActiveTasks.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\TagLine.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\Chat\\ChatsPlaceholder.tsx",["674"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myOrders\\Orders.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myOrders\\ActiveOrders.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\nav\\navAuth\\ProfileMenu.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\utils\\getErrors.tsx",["675","676"],"﻿import {toast} from \"react-toastify\";\r\nimport Alert from \"../../application/common/Alert\";\r\nimport {CloseIcon} from \"../icons/Icons\";\r\nimport React from \"react\";\r\n\r\nexport function alertErrors(errors: any){\r\n    const errorValuesArray = Object.values(errors.response.data.errors);\r\n    errorValuesArray.forEach((err: any) => (\r\n        toast.error(<Alert type=\"error\" subject=\"Error occurred\" icon={<CloseIcon boxSize={8} color=\"#73000c\"/>} message={err} />)\r\n))\r\n}","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\OrdersPage.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\OrderDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\enums\\orderStatus.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\orderInfo\\OrderInfo.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\orderInfo\\OrderActivity.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\createTask\\TaskDetailsForm.tsx",["677","678","679","680","681","682"],"﻿import {\r\n    Button,\r\n    Checkbox,\r\n    Divider,\r\n    Input, InputGroup,\r\n    InputLeftElement,\r\n    NumberInput, NumberInputField,\r\n    SimpleGrid,\r\n    Stack,\r\n    Textarea\r\n} from \"@chakra-ui/react\";\r\nimport { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, {lazy, Suspense, useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {StringParam, useQueryParams, NumberParam} from \"use-query-params\";\r\nimport SEO from \"../../application/appLayout/SEO\";\r\nimport {InfoIcon} from \"../../infrastructure/icons/Icons\";\r\nimport TaskFormImageUploader from \"./TaskFormImageUploader\";\r\nimport TaskFormUploadedImagesPreview from \"./TaskFormUploadedImagesPreview\";\r\nimport {DeliveryTypes} from \"../../infrastructure/enums/deliveryTypes\";\r\nimport InlineLoader from \"../../application/appLayout/InlineLoader\";\r\nimport {ITaskSubmission} from \"../../infrastructure/models/task\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport rootStoreContext from \"../../application/stores/rootstore\";\r\nimport {history} from \"../../index\";\r\nimport {Category} from \"../../infrastructure/enums/category\";\r\n\r\nconst Preview = lazy(() => import(\"./Preview\"));\r\nconst LocationComponent = lazy(() => import(\"./LocationFinder\"));\r\n\r\nconst TaskDetailsForm = () => {\r\n    const [taskDetails] = useQueryParams({\r\n        title: StringParam,\r\n        category: NumberParam,\r\n        deliveryType: NumberParam\r\n    })\r\n\r\n    const [isPreviewOpen, setIsPreviewOpen] = useState(false);\r\n\r\n    const togglePreviewWindow = useCallback(() => {\r\n        setIsPreviewOpen(!isPreviewOpen)\r\n    }, [isPreviewOpen])\r\n    const closePreviewWindow = useCallback(() => {\r\n        setIsPreviewOpen(false)\r\n    }, [isPreviewOpen]);\r\n\r\n    useEffect(() =>\r\n        window.addEventListener('beforeunload', () => closePreviewWindow())\r\n    );\r\n\r\n   const {createTask} = useContext(rootStoreContext).taskStore;\r\n   \r\n    return (\r\n        <div className=\"container\">\r\n            <SEO title={`${taskDetails.title} for ${taskDetails.category}`} />\r\n            <div className=\"main\">\r\n                <div style={{margin: \"1em 0\"}}>\r\n                    <h1 className=\"text__darker text__bigger__md\">Post your task it&apos;s <span className=\"text__primary\">Fast</span> & <span className=\"text__primary\">Easy</span></h1>\r\n                </div>\r\n                \r\n                <Formik initialValues={{title: taskDetails.title!, id: uuid(), description: \"\", urgent: false, imageFiles: [], address: \"\", postCode: \"\", price: 0, deliveryDate: \"\", category: taskDetails.category!, deliveryType: taskDetails.deliveryType!}} onSubmit={(values: ITaskSubmission, action) => {\r\n                    const taskSubmissionData = new FormData();\r\n                    taskSubmissionData.append(\"id\", values.id);\r\n                    taskSubmissionData.append(\"title\", values.title);\r\n                    taskSubmissionData.append(\"description\", values.description);\r\n                    values.imageFiles.forEach((image) => {\r\n                        taskSubmissionData.append(\"imageFiles\", image);\r\n                    })\r\n                    taskSubmissionData.append(\"address\", values.address);\r\n                    taskSubmissionData.append(\"postCode\", values.postCode);\r\n                    taskSubmissionData.append(\"initialPrice\", values.price.toString());\r\n                    taskSubmissionData.append(\"deliveryDate\", new Date(values.deliveryDate).toUTCString());\r\n                    taskSubmissionData.append(\"category\", values.category.toString());\r\n                    \r\n                    createTask(taskSubmissionData).then(() => history.push(`/task/${values.id}`)).catch(() => action.setSubmitting(false));\r\n                }}>\r\n                    {({\r\n                       handleChange,\r\n                       handleBlur, \r\n                       handleSubmit,\r\n                       values,\r\n                       errors,\r\n                       touched,\r\n                        setFieldValue,\r\n                        setFieldError,\r\n                        isSubmitting\r\n                    }) => (\r\n                        \r\n                    \r\n                <form onSubmit={handleSubmit}>\r\n                    \r\n                <div className=\"form__box\">\r\n                  <div className=\"form__box__description\">\r\n                      <div className=\"numbered__box\">1</div>\r\n                      Task Details\r\n                  </div>\r\n                  <Divider mt={4} mb={4} />  \r\n                  <div className=\"form__field form__task\">\r\n                      <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"15px\", sm: \"8px\"}}>\r\n                          <p className=\"form__detail\">Task title:</p>\r\n                          <div style={{width: \"100%\"}}>\r\n                          <Textarea  name=\"title\" className=\"form__textarea form__textarea__no__label\" id=\"title\" rows={3} onChange={handleChange} onBlur={handleBlur} value={values.title} />\r\n                          {errors.title && touched.title && (\r\n                              <small className=\"form__error\">{errors.title}</small>\r\n                          )}\r\n                          </div>\r\n                      </Stack>\r\n                  </div>\r\n                    <div className=\"form__field form__task\">\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Selected Category:</p>\r\n                            <div style={{width: \"100%\"}}>\r\n                            <p className=\"text__darker\">{Category[taskDetails.category!]}</p>\r\n                            <span className=\"text__blue\">change</span>\r\n                            </div>\r\n                        </Stack>\r\n                    </div>\r\n\r\n                    <div className=\"form__field form__task\">\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Description:</p>\r\n                            <div style={{width: \"100%\"}}>\r\n                                <Textarea name=\"description\" className=\"form__textarea form__textarea__no__label\" id=\"title\" rows={7} onChange={handleChange} onBlur={handleBlur} value={values.description} />\r\n                                {errors.description && touched.description ? (\r\n                                    <small className=\"form__error\">{errors.description}</small>\r\n                                ) : <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Be as specific as you can about what needs doing</small>}\r\n                            </div>\r\n                        </Stack>\r\n                    </div>  \r\n\r\n                    <div className=\"form__field form__task\" style={{margin: \"2em 0\"}}>\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Urgency:<span style={{display: \"block\"}}>(Optional)</span></p>\r\n                                \r\n                            <div style={{width: \"100%\"}}>\r\n                                <Checkbox className=\"form__checkbox__bg\" size=\"lg\" colorScheme=\"green\" iconSize=\"2em\" spacing=\"1em\"><div className=\"urgent__label\">URGENT</div>\r\n                                </Checkbox>\r\n                                <div>\r\n                                <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Add an urgent label to let taskers know that you are looking for quick responses</small>\r\n                                </div>\r\n                                 </div>\r\n                        </Stack>\r\n                    </div>\r\n\r\n                    <div className=\"form__field form__task\" >\r\n                        <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                            <p className=\"form__detail\">Tags:<span style={{display: \"block\"}}>(Optional)</span></p>\r\n                            <div style={{width: \"100%\"}}>\r\n                                <small className=\"text__dark__grey\">Increase your exposure. Enter up to 4 keywords taskers can use to search yout task.</small>\r\n                                \r\n                                <Stack style={{marginTop: \"1em\"}} direction=\"row\" spacing=\"20px\">\r\n                                    <Input style={{width: \"300px\"}} placeholder=\"Add a tag\" className=\"form__input\" />\r\n                                    <Button type=\"button\" style={{fontWeight: 500}} className=\"btn btn__sm btn__primary\">Add tag</Button>\r\n                                </Stack>\r\n                            </div>\r\n                        </Stack>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n                    <div className=\"form__box\">\r\n                        <div className=\"form__box__description\">\r\n                            <div className=\"numbered__box\">2</div>\r\n                            Task Media (Optional)\r\n                        </div>\r\n                        <Divider mt={4} mb={4} />\r\n                        \r\n                        <h1 className=\"title\">Add photos to imporve the interest on your task</h1>\r\n                        \r\n                        <p className=\"text__silent text__sm text__small__cut\">Add pictures that explain your task or pictures of what you want to be done. You can upload a maximum of 3 photos. The photos are stored in a cloudinary bucket and resize the image to the recommended 618px by 427px ratio. Drag an drop your photos into the given area below.</p>\r\n                        \r\n                        <SimpleGrid style={{margin: \"2em 0\", width: \"100%\"}} templateColumns={{xl: \"1fr 1fr\", lg: \"1fr 1fr\", md: \"1fr\", sm: \"1fr\"}}   spacing=\"20px\">\r\n                            <div>\r\n                        <TaskFormImageUploader setFieldValue={setFieldValue} />\r\n                            </div>\r\n                            <div>\r\n                        <TaskFormUploadedImagesPreview />\r\n                            </div>\r\n                        </SimpleGrid>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form__box\">\r\n                        <div className=\"form__box__description\">\r\n                            <div className=\"numbered__box\">3</div>\r\n                            Task Location\r\n                        </div>\r\n                        <Divider mt={4} mb={4} />\r\n                        \r\n                        <div style={{marginBottom: \"1em\"}}>\r\n                            <p className=\"bold__label\">Delivery Type: <span className=\"text__darker\">{DeliveryTypes[taskDetails.deliveryType!]}</span></p>\r\n                            <p className=\"text__blue\">Change</p>\r\n                        </div>\r\n                        {taskDetails.deliveryType! === DeliveryTypes.InPerson ? (\r\n                            <Suspense fallback={<InlineLoader />}>\r\n                                <p className=\"text__darker\">Search and select your address</p>\r\n                                <LocationComponent addressErrors={errors.address} setFieldError={setFieldError} setFieldValue={setFieldValue} values={values} />\r\n                                <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>If you cannot see your address please select online as the delivery type then convey your real address to the runner on messages</small>\r\n                               \r\n                            </Suspense>\r\n                        ) : (\r\n                            <p className=\"text__darker\">This task will be delivered online</p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"form__box\">\r\n                        <div className=\"form__box__description\">\r\n                            <div className=\"numbered__box\">4</div>\r\n                            Budget & Dates\r\n                        </div>\r\n                        <Divider mt={4} mb={4} />\r\n\r\n                        <div className=\"form__field form__task\">\r\n                            <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                                <p className=\"form__detail\">Budget:</p>\r\n                                <div style={{width: \"100%\"}}>\r\n                                    <InputGroup>\r\n                                        <InputLeftElement\r\n                                            pointerEvents=\"none\"\r\n                                            fontSize=\"1.2em\"\r\n                                            className=\"query__price__placeholder__green\"\r\n                                        >\r\n                                            $\r\n                                        </InputLeftElement>\r\n                                        <NumberInput  clampValueOnBlur={false}  size=\"md\" defaultValue={0} precision={2} min={0}>\r\n                                            <NumberInputField name=\"price\" error={!!errors.price && touched.price} value={values.price} onChange={handleChange} onBlur={handleBlur}  className=\"task__price__input\" />\r\n                                        </NumberInput>\r\n                                    </InputGroup> \r\n                                    {errors.price && touched.price ? (\r\n                                        <small className=\"form__error\">{errors.price}</small>\r\n                                    ) : <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Your budget signifies the max amount you can pay, runners will start bidding from that price.</small>}\r\n                                </div>\r\n                            </Stack>\r\n                        </div>\r\n\r\n                        <div className=\"form__field form__task\">\r\n                            <Stack direction={[\"column\", \"row\"]} spacing={{xl: \"15px\", lg: \"15px\", md: \"5px\", sm: \"8px\"}}>\r\n                                <p className=\"form__detail\">Delivery Date:</p>\r\n                                <div style={{width: \"100%\"}}>\r\n                                    <Input className=\"form__input\" type=\"date\" value={values.deliveryDate} onChange={handleChange} onBlur={handleBlur} name=\"deliveryDate\" min={new Date().toISOString().split(\"T\")[0]} />\r\n                                    {errors.deliveryDate && touched.deliveryDate ? (\r\n                                        <small className=\"form__error\">{errors.deliveryDate}</small>\r\n                                    ) : <small className=\"text__darker\"><span style={{marginRight: \"0.5em\"}}><InfoIcon boxSize={6} color=\"#3182CE\" /></span>Your task ends on the given date and you will have to re-activate it and set a new date</small>}\r\n                                </div>\r\n                            </Stack>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div style={{margin: \"1em 0\", lineHeight: \"12px\"}}>\r\n                        <small className=\"text__darker text__small__cut\">By listing your task on taskr, you are agreeing to our <span className=\"text__blue\">terms of use, privacy policy</span> and <span className=\"text__blue\">site policies</span>.</small>\r\n                        <small className=\"text__darker text__small__cut\" style={{display: \"block\"}}>Please do not post duplicate tasks.</small>\r\n                    </div>\r\n\r\n                    <Stack direction=\"row\" spacing=\"20px\">\r\n                    <Button isLoading={isSubmitting} className=\"btn btn__primary btn__nm btn__bg btn__shadow \" type=\"submit\">List your task</Button>\r\n                        <Button type=\"button\" className=\"btn btn__white btn__nm btn__bg \" onClick={togglePreviewWindow}>Preview</Button>\r\n                    </Stack>\r\n                </form>\r\n                    )}\r\n                </Formik>\r\n                \r\n            </div>\r\n            {isPreviewOpen && (\r\n                <Suspense fallback={<InlineLoader />}>\r\n                <Preview closeWindow={closePreviewWindow}>\r\n                    apple\r\n                </Preview>\r\n                </Suspense>\r\n            )} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(TaskDetailsForm);","C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\SoftAlert.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\infrastructure\\icons\\Icons.tsx",["683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776"],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\myProfile\\forms\\SkillsForm.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Alert.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\order\\orderInfo\\OrderInfoDetails.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\assets\\css\\chakra-ui-theme.ts",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\features\\profile\\settings\\security\\SecurityTab.tsx",[],"C:\\Users\\Asus\\Desktop\\c#\\taskr-frontend\\src\\application\\common\\Review.tsx",[],{"ruleId":"777","severity":1,"message":"778","line":79,"column":22,"nodeType":"779","messageId":"780","endLine":79,"endColumn":33},{"ruleId":"777","severity":1,"message":"778","line":118,"column":21,"nodeType":"779","messageId":"780","endLine":118,"endColumn":32},{"ruleId":"777","severity":1,"message":"781","line":158,"column":17,"nodeType":"782","messageId":"783","endLine":158,"endColumn":65},{"ruleId":"777","severity":1,"message":"778","line":158,"column":50,"nodeType":"779","messageId":"780","endLine":158,"endColumn":61},{"ruleId":"777","severity":1,"message":"778","line":164,"column":58,"nodeType":"779","messageId":"780","endLine":164,"endColumn":69},{"ruleId":"777","severity":1,"message":"781","line":3,"column":16,"nodeType":"784","messageId":"783","endLine":3,"endColumn":57},{"ruleId":"777","severity":1,"message":"785","line":3,"column":36,"nodeType":"779","messageId":"786","endLine":3,"endColumn":45},{"ruleId":"777","severity":1,"message":"787","line":3,"column":47,"nodeType":"779","messageId":"786","endLine":3,"endColumn":56},{"ruleId":"788","severity":1,"message":"789","line":18,"column":85,"nodeType":"790","messageId":"791","endLine":18,"endColumn":94,"suggestions":"792"},{"ruleId":"788","severity":1,"message":"789","line":31,"column":80,"nodeType":"790","messageId":"791","endLine":31,"endColumn":85,"suggestions":"793"},{"ruleId":"788","severity":1,"message":"789","line":16,"column":25,"nodeType":"790","messageId":"791","endLine":16,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":35,"column":5,"nodeType":"794","messageId":"783","endLine":35,"endColumn":31},{"ruleId":"777","severity":1,"message":"781","line":45,"column":26,"nodeType":"782","messageId":"783","endLine":45,"endColumn":72},{"ruleId":"777","severity":1,"message":"781","line":59,"column":30,"nodeType":"782","messageId":"783","endLine":59,"endColumn":41},{"ruleId":"777","severity":1,"message":"781","line":73,"column":30,"nodeType":"782","messageId":"783","endLine":73,"endColumn":52},{"ruleId":"777","severity":1,"message":"778","line":73,"column":37,"nodeType":"779","messageId":"780","endLine":73,"endColumn":48},{"ruleId":"777","severity":1,"message":"781","line":87,"column":26,"nodeType":"782","messageId":"783","endLine":87,"endColumn":31},{"ruleId":"777","severity":1,"message":"781","line":29,"column":31,"nodeType":"782","messageId":"783","endLine":29,"endColumn":64},{"ruleId":"777","severity":1,"message":"781","line":53,"column":37,"nodeType":"782","messageId":"783","endLine":53,"endColumn":48},{"ruleId":"777","severity":1,"message":"781","line":68,"column":36,"nodeType":"782","messageId":"783","endLine":68,"endColumn":61},{"ruleId":"788","severity":1,"message":"789","line":72,"column":17,"nodeType":"790","messageId":"791","endLine":72,"endColumn":37,"suggestions":"795"},{"ruleId":"777","severity":1,"message":"781","line":81,"column":39,"nodeType":"782","messageId":"783","endLine":81,"endColumn":67},{"ruleId":"788","severity":1,"message":"789","line":85,"column":17,"nodeType":"790","messageId":"791","endLine":85,"endColumn":37,"suggestions":"796"},{"ruleId":"777","severity":1,"message":"781","line":94,"column":33,"nodeType":"782","messageId":"783","endLine":94,"endColumn":55},{"ruleId":"777","severity":1,"message":"778","line":94,"column":40,"nodeType":"779","messageId":"780","endLine":94,"endColumn":51},{"ruleId":"788","severity":1,"message":"789","line":99,"column":21,"nodeType":"790","messageId":"791","endLine":99,"endColumn":41,"suggestions":"797"},{"ruleId":"788","severity":1,"message":"789","line":102,"column":21,"nodeType":"790","messageId":"791","endLine":102,"endColumn":41,"suggestions":"798"},{"ruleId":"777","severity":1,"message":"781","line":114,"column":29,"nodeType":"782","messageId":"783","endLine":114,"endColumn":56},{"ruleId":"788","severity":1,"message":"789","line":119,"column":21,"nodeType":"790","messageId":"791","endLine":119,"endColumn":41,"suggestions":"799"},{"ruleId":"788","severity":1,"message":"789","line":122,"column":21,"nodeType":"790","messageId":"791","endLine":122,"endColumn":41,"suggestions":"800"},{"ruleId":"788","severity":1,"message":"789","line":125,"column":21,"nodeType":"790","messageId":"791","endLine":125,"endColumn":41,"suggestions":"801"},{"ruleId":"788","severity":1,"message":"789","line":128,"column":21,"nodeType":"790","messageId":"791","endLine":128,"endColumn":41,"suggestions":"802"},{"ruleId":"777","severity":1,"message":"781","line":139,"column":36,"nodeType":"782","messageId":"783","endLine":139,"endColumn":74},{"ruleId":"777","severity":1,"message":"781","line":154,"column":32,"nodeType":"782","messageId":"783","endLine":154,"endColumn":65},{"ruleId":"788","severity":1,"message":"789","line":159,"column":17,"nodeType":"790","messageId":"791","endLine":159,"endColumn":23,"suggestions":"803"},{"ruleId":"777","severity":1,"message":"781","line":167,"column":34,"nodeType":"782","messageId":"783","endLine":167,"endColumn":67},{"ruleId":"788","severity":1,"message":"789","line":171,"column":16,"nodeType":"790","messageId":"791","endLine":171,"endColumn":39,"suggestions":"804"},{"ruleId":"788","severity":1,"message":"789","line":171,"column":47,"nodeType":"790","messageId":"791","endLine":171,"endColumn":70,"suggestions":"805"},{"ruleId":"777","severity":1,"message":"781","line":179,"column":42,"nodeType":"782","messageId":"783","endLine":179,"endColumn":53},{"ruleId":"788","severity":1,"message":"789","line":186,"column":17,"nodeType":"790","messageId":"791","endLine":186,"endColumn":47,"suggestions":"806"},{"ruleId":"777","severity":1,"message":"781","line":194,"column":38,"nodeType":"782","messageId":"783","endLine":194,"endColumn":49},{"ruleId":"788","severity":1,"message":"789","line":198,"column":17,"nodeType":"790","messageId":"791","endLine":198,"endColumn":40,"suggestions":"807"},{"ruleId":"788","severity":1,"message":"789","line":199,"column":17,"nodeType":"790","messageId":"791","endLine":199,"endColumn":47,"suggestions":"808"},{"ruleId":"777","severity":1,"message":"781","line":207,"column":28,"nodeType":"782","messageId":"783","endLine":207,"endColumn":53},{"ruleId":"777","severity":1,"message":"781","line":5,"column":17,"nodeType":"782","messageId":"783","endLine":5,"endColumn":32},{"ruleId":"777","severity":1,"message":"809","line":5,"column":18,"nodeType":"779","messageId":"780","endLine":5,"endColumn":28},{"ruleId":"777","severity":1,"message":"781","line":4,"column":24,"nodeType":"782","messageId":"783","endLine":4,"endColumn":29},{"ruleId":"777","severity":1,"message":"781","line":13,"column":1,"nodeType":"784","messageId":"783","endLine":13,"endColumn":60},{"ruleId":"777","severity":1,"message":"781","line":6,"column":24,"nodeType":"782","messageId":"783","endLine":6,"endColumn":29},{"ruleId":"788","severity":1,"message":"789","line":24,"column":34,"nodeType":"790","messageId":"791","endLine":24,"endColumn":79},{"ruleId":"788","severity":1,"message":"789","line":109,"column":46,"nodeType":"790","messageId":"791","endLine":109,"endColumn":53,"suggestions":"810"},{"ruleId":"777","severity":1,"message":"781","line":4,"column":34,"nodeType":"782","messageId":"783","endLine":4,"endColumn":39},{"ruleId":"777","severity":1,"message":"781","line":26,"column":35,"nodeType":"782","messageId":"783","endLine":26,"endColumn":54},{"ruleId":"788","severity":1,"message":"789","line":29,"column":39,"nodeType":"790","messageId":"791","endLine":29,"endColumn":70},{"ruleId":"788","severity":1,"message":"789","line":33,"column":59,"nodeType":"790","messageId":"791","endLine":33,"endColumn":78,"suggestions":"811"},{"ruleId":"788","severity":1,"message":"789","line":36,"column":13,"nodeType":"790","messageId":"791","endLine":36,"endColumn":32,"suggestions":"812"},{"ruleId":"788","severity":1,"message":"789","line":41,"column":17,"nodeType":"790","messageId":"791","endLine":41,"endColumn":27,"suggestions":"813"},{"ruleId":"788","severity":1,"message":"789","line":43,"column":13,"nodeType":"790","messageId":"791","endLine":43,"endColumn":52,"suggestions":"814"},{"ruleId":"777","severity":1,"message":"781","line":51,"column":33,"nodeType":"782","messageId":"783","endLine":51,"endColumn":38},{"ruleId":"788","severity":1,"message":"789","line":52,"column":9,"nodeType":"790","messageId":"791","endLine":52,"endColumn":28,"suggestions":"815"},{"ruleId":"788","severity":1,"message":"789","line":52,"column":54,"nodeType":"790","messageId":"791","endLine":52,"endColumn":64,"suggestions":"816"},{"ruleId":"788","severity":1,"message":"789","line":53,"column":13,"nodeType":"790","messageId":"791","endLine":53,"endColumn":32,"suggestions":"817"},{"ruleId":"777","severity":1,"message":"781","line":56,"column":27,"nodeType":"782","messageId":"783","endLine":56,"endColumn":49},{"ruleId":"777","severity":1,"message":"778","line":56,"column":34,"nodeType":"779","messageId":"780","endLine":56,"endColumn":45},{"ruleId":"788","severity":1,"message":"789","line":59,"column":25,"nodeType":"790","messageId":"791","endLine":59,"endColumn":35,"suggestions":"818"},{"ruleId":"788","severity":1,"message":"789","line":59,"column":48,"nodeType":"790","messageId":"791","endLine":59,"endColumn":78,"suggestions":"819"},{"ruleId":"788","severity":1,"message":"789","line":59,"column":84,"nodeType":"790","messageId":"791","endLine":59,"endColumn":94,"suggestions":"820"},{"ruleId":"788","severity":1,"message":"789","line":59,"column":107,"nodeType":"790","messageId":"791","endLine":59,"endColumn":117,"suggestions":"821"},{"ruleId":"788","severity":1,"message":"789","line":60,"column":21,"nodeType":"790","messageId":"791","endLine":60,"endColumn":31,"suggestions":"822"},{"ruleId":"788","severity":1,"message":"789","line":63,"column":35,"nodeType":"790","messageId":"791","endLine":63,"endColumn":54,"suggestions":"823"},{"ruleId":"777","severity":1,"message":"781","line":70,"column":27,"nodeType":"782","messageId":"783","endLine":70,"endColumn":55},{"ruleId":"777","severity":1,"message":"781","line":94,"column":27,"nodeType":"782","messageId":"783","endLine":94,"endColumn":52},{"ruleId":"777","severity":1,"message":"781","line":110,"column":33,"nodeType":"782","messageId":"783","endLine":110,"endColumn":87},{"ruleId":"777","severity":1,"message":"778","line":110,"column":72,"nodeType":"779","messageId":"780","endLine":110,"endColumn":83},{"ruleId":"788","severity":1,"message":"789","line":114,"column":17,"nodeType":"790","messageId":"791","endLine":114,"endColumn":47,"suggestions":"824"},{"ruleId":"777","severity":1,"message":"781","line":122,"column":32,"nodeType":"782","messageId":"783","endLine":122,"endColumn":87},{"ruleId":"777","severity":1,"message":"778","line":122,"column":72,"nodeType":"779","messageId":"780","endLine":122,"endColumn":83},{"ruleId":"788","severity":1,"message":"789","line":126,"column":17,"nodeType":"790","messageId":"791","endLine":126,"endColumn":49,"suggestions":"825"},{"ruleId":"777","severity":1,"message":"781","line":135,"column":26,"nodeType":"782","messageId":"783","endLine":135,"endColumn":70},{"ruleId":"788","severity":1,"message":"789","line":143,"column":45,"nodeType":"790","messageId":"791","endLine":143,"endColumn":63,"suggestions":"826"},{"ruleId":"788","severity":1,"message":"789","line":146,"column":46,"nodeType":"790","messageId":"791","endLine":146,"endColumn":65,"suggestions":"827"},{"ruleId":"777","severity":1,"message":"781","line":3,"column":25,"nodeType":"782","messageId":"783","endLine":3,"endColumn":57},{"ruleId":"777","severity":1,"message":"781","line":29,"column":25,"nodeType":"782","messageId":"783","endLine":29,"endColumn":73},{"ruleId":"788","severity":1,"message":"789","line":40,"column":97,"nodeType":"790","messageId":"791","endLine":40,"endColumn":127,"suggestions":"828"},{"ruleId":"777","severity":1,"message":"781","line":56,"column":27,"nodeType":"782","messageId":"783","endLine":56,"endColumn":52},{"ruleId":"777","severity":1,"message":"781","line":71,"column":26,"nodeType":"782","messageId":"783","endLine":71,"endColumn":50},{"ruleId":"777","severity":1,"message":"781","line":87,"column":29,"nodeType":"782","messageId":"783","endLine":87,"endColumn":53},{"ruleId":"788","severity":1,"message":"789","line":92,"column":17,"nodeType":"790","messageId":"791","endLine":92,"endColumn":26,"suggestions":"829"},{"ruleId":"788","severity":1,"message":"789","line":95,"column":21,"nodeType":"790","messageId":"791","endLine":95,"endColumn":25,"suggestions":"830"},{"ruleId":"777","severity":1,"message":"781","line":106,"column":31,"nodeType":"782","messageId":"783","endLine":106,"endColumn":70},{"ruleId":"788","severity":1,"message":"789","line":14,"column":9,"nodeType":"790","messageId":"791","endLine":14,"endColumn":48,"suggestions":"831"},{"ruleId":"777","severity":1,"message":"781","line":6,"column":18,"nodeType":"782","messageId":"783","endLine":6,"endColumn":23},{"ruleId":"777","severity":1,"message":"781","line":4,"column":16,"nodeType":"784","messageId":"783","endLine":4,"endColumn":33},{"ruleId":"777","severity":1,"message":"781","line":4,"column":22,"nodeType":"782","messageId":"783","endLine":4,"endColumn":27},{"ruleId":"777","severity":1,"message":"781","line":4,"column":32,"nodeType":"782","messageId":"783","endLine":4,"endColumn":37},{"ruleId":"788","severity":1,"message":"789","line":34,"column":88,"nodeType":"790","messageId":"791","endLine":34,"endColumn":93},{"ruleId":"788","severity":1,"message":"789","line":35,"column":96,"nodeType":"790","messageId":"791","endLine":35,"endColumn":101},{"ruleId":"788","severity":1,"message":"789","line":36,"column":89,"nodeType":"790","messageId":"791","endLine":36,"endColumn":94},{"ruleId":"777","severity":1,"message":"781","line":19,"column":31,"nodeType":"782","messageId":"783","endLine":19,"endColumn":61},{"ruleId":"777","severity":1,"message":"781","line":28,"column":36,"nodeType":"782","messageId":"783","endLine":28,"endColumn":66},{"ruleId":"777","severity":1,"message":"781","line":42,"column":28,"nodeType":"782","messageId":"783","endLine":42,"endColumn":56},{"ruleId":"777","severity":1,"message":"781","line":63,"column":32,"nodeType":"782","messageId":"783","endLine":63,"endColumn":62},{"ruleId":"777","severity":1,"message":"781","line":21,"column":39,"nodeType":"782","messageId":"783","endLine":21,"endColumn":64},{"ruleId":"777","severity":1,"message":"781","line":39,"column":37,"nodeType":"782","messageId":"783","endLine":39,"endColumn":62},{"ruleId":"777","severity":1,"message":"781","line":32,"column":26,"nodeType":"782","messageId":"783","endLine":32,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":47,"column":35,"nodeType":"782","messageId":"783","endLine":47,"endColumn":132},{"ruleId":"777","severity":1,"message":"781","line":55,"column":27,"nodeType":"782","messageId":"783","endLine":55,"endColumn":48},{"ruleId":"777","severity":1,"message":"781","line":73,"column":25,"nodeType":"782","messageId":"783","endLine":73,"endColumn":50},{"ruleId":"777","severity":1,"message":"781","line":98,"column":27,"nodeType":"782","messageId":"783","endLine":98,"endColumn":52},{"ruleId":"777","severity":1,"message":"781","line":128,"column":26,"nodeType":"782","messageId":"783","endLine":128,"endColumn":61},{"ruleId":"777","severity":1,"message":"781","line":4,"column":41,"nodeType":"782","messageId":"783","endLine":4,"endColumn":46},{"ruleId":"777","severity":1,"message":"781","line":4,"column":32,"nodeType":"782","messageId":"783","endLine":4,"endColumn":37},{"ruleId":"788","severity":1,"message":"789","line":19,"column":62,"nodeType":"790","messageId":"791","endLine":19,"endColumn":67,"suggestions":"832"},{"ruleId":"788","severity":1,"message":"789","line":22,"column":22,"nodeType":"790","messageId":"791","endLine":22,"endColumn":27,"suggestions":"833"},{"ruleId":"788","severity":1,"message":"789","line":23,"column":42,"nodeType":"790","messageId":"791","endLine":23,"endColumn":47,"suggestions":"834"},{"ruleId":"788","severity":1,"message":"789","line":27,"column":75,"nodeType":"790","messageId":"791","endLine":27,"endColumn":80,"suggestions":"835"},{"ruleId":"788","severity":1,"message":"789","line":27,"column":156,"nodeType":"790","messageId":"791","endLine":27,"endColumn":161,"suggestions":"836"},{"ruleId":"777","severity":1,"message":"781","line":25,"column":47,"nodeType":"782","messageId":"783","endLine":25,"endColumn":52},{"ruleId":"788","severity":1,"message":"789","line":27,"column":40,"nodeType":"790","messageId":"791","endLine":27,"endColumn":71},{"ruleId":"788","severity":1,"message":"789","line":31,"column":71,"nodeType":"790","messageId":"791","endLine":31,"endColumn":102,"suggestions":"837"},{"ruleId":"788","severity":1,"message":"789","line":34,"column":13,"nodeType":"790","messageId":"791","endLine":34,"endColumn":43,"suggestions":"838"},{"ruleId":"777","severity":1,"message":"781","line":47,"column":33,"nodeType":"782","messageId":"783","endLine":47,"endColumn":38},{"ruleId":"788","severity":1,"message":"789","line":48,"column":9,"nodeType":"790","messageId":"791","endLine":48,"endColumn":40,"suggestions":"839"},{"ruleId":"777","severity":1,"message":"781","line":51,"column":28,"nodeType":"782","messageId":"783","endLine":51,"endColumn":33},{"ruleId":"777","severity":1,"message":"781","line":55,"column":32,"nodeType":"782","messageId":"783","endLine":55,"endColumn":47},{"ruleId":"777","severity":1,"message":"840","line":55,"column":33,"nodeType":"779","messageId":"780","endLine":55,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":59,"column":34,"nodeType":"782","messageId":"783","endLine":59,"endColumn":39},{"ruleId":"777","severity":1,"message":"781","line":1,"column":8,"nodeType":"784","messageId":"783","endLine":1,"endColumn":46},{"ruleId":"777","severity":1,"message":"841","line":1,"column":32,"nodeType":"779","messageId":"780","endLine":1,"endColumn":45},{"ruleId":"777","severity":1,"message":"781","line":4,"column":8,"nodeType":"784","messageId":"783","endLine":4,"endColumn":48},{"ruleId":"777","severity":1,"message":"841","line":4,"column":34,"nodeType":"779","messageId":"780","endLine":4,"endColumn":47},{"ruleId":"777","severity":1,"message":"781","line":7,"column":8,"nodeType":"784","messageId":"783","endLine":7,"endColumn":49},{"ruleId":"777","severity":1,"message":"841","line":7,"column":35,"nodeType":"779","messageId":"780","endLine":7,"endColumn":48},{"ruleId":"777","severity":1,"message":"781","line":4,"column":38,"nodeType":"782","messageId":"783","endLine":4,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":4,"column":26,"nodeType":"782","messageId":"783","endLine":4,"endColumn":31},{"ruleId":"777","severity":1,"message":"781","line":6,"column":8,"nodeType":"784","messageId":"783","endLine":6,"endColumn":41},{"ruleId":"777","severity":1,"message":"842","line":6,"column":29,"nodeType":"779","messageId":"780","endLine":6,"endColumn":40},{"ruleId":"788","severity":1,"message":"789","line":61,"column":48,"nodeType":"790","messageId":"791","endLine":61,"endColumn":66},{"ruleId":"788","severity":1,"message":"789","line":61,"column":193,"nodeType":"790","messageId":"791","endLine":61,"endColumn":214},{"ruleId":"788","severity":1,"message":"789","line":61,"column":230,"nodeType":"790","messageId":"791","endLine":61,"endColumn":255},{"ruleId":"788","severity":1,"message":"789","line":113,"column":67,"nodeType":"790","messageId":"791","endLine":113,"endColumn":88},{"ruleId":"788","severity":1,"message":"789","line":191,"column":117,"nodeType":"790","messageId":"791","endLine":191,"endColumn":142},{"ruleId":"788","severity":1,"message":"789","line":194,"column":26,"nodeType":"790","messageId":"791","endLine":194,"endColumn":51},{"ruleId":"777","severity":1,"message":"781","line":4,"column":8,"nodeType":"784","messageId":"783","endLine":4,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":4,"column":26,"nodeType":"779","messageId":"780","endLine":4,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":12,"column":8,"nodeType":"784","messageId":"783","endLine":12,"endColumn":41},{"ruleId":"777","severity":1,"message":"809","line":12,"column":30,"nodeType":"779","messageId":"780","endLine":12,"endColumn":40},{"ruleId":"777","severity":1,"message":"781","line":64,"column":8,"nodeType":"784","messageId":"783","endLine":64,"endColumn":39},{"ruleId":"777","severity":1,"message":"809","line":64,"column":28,"nodeType":"779","messageId":"780","endLine":64,"endColumn":38},{"ruleId":"777","severity":1,"message":"781","line":111,"column":8,"nodeType":"784","messageId":"783","endLine":111,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":111,"column":27,"nodeType":"779","messageId":"780","endLine":111,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":160,"column":8,"nodeType":"784","messageId":"783","endLine":160,"endColumn":43},{"ruleId":"777","severity":1,"message":"809","line":160,"column":32,"nodeType":"779","messageId":"780","endLine":160,"endColumn":42},{"ruleId":"777","severity":1,"message":"781","line":208,"column":8,"nodeType":"784","messageId":"783","endLine":208,"endColumn":44},{"ruleId":"777","severity":1,"message":"809","line":208,"column":33,"nodeType":"779","messageId":"780","endLine":208,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":220,"column":8,"nodeType":"784","messageId":"783","endLine":220,"endColumn":43},{"ruleId":"777","severity":1,"message":"809","line":220,"column":32,"nodeType":"779","messageId":"780","endLine":220,"endColumn":42},{"ruleId":"777","severity":1,"message":"781","line":228,"column":8,"nodeType":"784","messageId":"783","endLine":228,"endColumn":36},{"ruleId":"777","severity":1,"message":"809","line":228,"column":25,"nodeType":"779","messageId":"780","endLine":228,"endColumn":35},{"ruleId":"777","severity":1,"message":"781","line":325,"column":8,"nodeType":"784","messageId":"783","endLine":325,"endColumn":41},{"ruleId":"777","severity":1,"message":"809","line":325,"column":30,"nodeType":"779","messageId":"780","endLine":325,"endColumn":40},{"ruleId":"777","severity":1,"message":"781","line":334,"column":8,"nodeType":"784","messageId":"783","endLine":334,"endColumn":41},{"ruleId":"777","severity":1,"message":"809","line":334,"column":30,"nodeType":"779","messageId":"780","endLine":334,"endColumn":40},{"ruleId":"777","severity":1,"message":"781","line":342,"column":8,"nodeType":"784","messageId":"783","endLine":342,"endColumn":39},{"ruleId":"777","severity":1,"message":"809","line":342,"column":28,"nodeType":"779","messageId":"780","endLine":342,"endColumn":38},{"ruleId":"777","severity":1,"message":"781","line":391,"column":8,"nodeType":"784","messageId":"783","endLine":391,"endColumn":40},{"ruleId":"777","severity":1,"message":"809","line":391,"column":29,"nodeType":"779","messageId":"780","endLine":391,"endColumn":39},{"ruleId":"777","severity":1,"message":"781","line":399,"column":8,"nodeType":"784","messageId":"783","endLine":399,"endColumn":45},{"ruleId":"777","severity":1,"message":"809","line":399,"column":34,"nodeType":"779","messageId":"780","endLine":399,"endColumn":44},{"ruleId":"777","severity":1,"message":"781","line":407,"column":8,"nodeType":"784","messageId":"783","endLine":407,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":407,"column":26,"nodeType":"779","messageId":"780","endLine":407,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":463,"column":8,"nodeType":"784","messageId":"783","endLine":463,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":463,"column":27,"nodeType":"779","messageId":"780","endLine":463,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":471,"column":8,"nodeType":"784","messageId":"783","endLine":471,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":471,"column":26,"nodeType":"779","messageId":"780","endLine":471,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":522,"column":8,"nodeType":"784","messageId":"783","endLine":522,"endColumn":45},{"ruleId":"777","severity":1,"message":"809","line":522,"column":34,"nodeType":"779","messageId":"780","endLine":522,"endColumn":44},{"ruleId":"777","severity":1,"message":"781","line":561,"column":8,"nodeType":"784","messageId":"783","endLine":561,"endColumn":44},{"ruleId":"777","severity":1,"message":"809","line":561,"column":33,"nodeType":"779","messageId":"780","endLine":561,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":600,"column":8,"nodeType":"784","messageId":"783","endLine":600,"endColumn":44},{"ruleId":"777","severity":1,"message":"809","line":600,"column":33,"nodeType":"779","messageId":"780","endLine":600,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":649,"column":8,"nodeType":"784","messageId":"783","endLine":649,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":649,"column":27,"nodeType":"779","messageId":"780","endLine":649,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":657,"column":8,"nodeType":"784","messageId":"783","endLine":657,"endColumn":36},{"ruleId":"777","severity":1,"message":"809","line":657,"column":25,"nodeType":"779","messageId":"780","endLine":657,"endColumn":35},{"ruleId":"777","severity":1,"message":"781","line":701,"column":8,"nodeType":"784","messageId":"783","endLine":701,"endColumn":41},{"ruleId":"777","severity":1,"message":"809","line":701,"column":30,"nodeType":"779","messageId":"780","endLine":701,"endColumn":40},{"ruleId":"777","severity":1,"message":"781","line":761,"column":8,"nodeType":"784","messageId":"783","endLine":761,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":761,"column":26,"nodeType":"779","messageId":"780","endLine":761,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":808,"column":8,"nodeType":"784","messageId":"783","endLine":808,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":808,"column":27,"nodeType":"779","messageId":"780","endLine":808,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":816,"column":8,"nodeType":"784","messageId":"783","endLine":816,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":816,"column":26,"nodeType":"779","messageId":"780","endLine":816,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":824,"column":8,"nodeType":"784","messageId":"783","endLine":824,"endColumn":42},{"ruleId":"777","severity":1,"message":"809","line":824,"column":31,"nodeType":"779","messageId":"780","endLine":824,"endColumn":41},{"ruleId":"777","severity":1,"message":"781","line":868,"column":8,"nodeType":"784","messageId":"783","endLine":868,"endColumn":49},{"ruleId":"777","severity":1,"message":"809","line":868,"column":38,"nodeType":"779","messageId":"780","endLine":868,"endColumn":48},{"ruleId":"777","severity":1,"message":"781","line":922,"column":8,"nodeType":"784","messageId":"783","endLine":922,"endColumn":41},{"ruleId":"777","severity":1,"message":"809","line":922,"column":30,"nodeType":"779","messageId":"780","endLine":922,"endColumn":40},{"ruleId":"777","severity":1,"message":"781","line":930,"column":8,"nodeType":"784","messageId":"783","endLine":930,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":930,"column":26,"nodeType":"779","messageId":"780","endLine":930,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":1039,"column":8,"nodeType":"784","messageId":"783","endLine":1039,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":1039,"column":26,"nodeType":"779","messageId":"780","endLine":1039,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":1080,"column":16,"nodeType":"784","messageId":"783","endLine":1080,"endColumn":46},{"ruleId":"777","severity":1,"message":"809","line":1080,"column":35,"nodeType":"779","messageId":"780","endLine":1080,"endColumn":45},{"ruleId":"777","severity":1,"message":"781","line":1088,"column":8,"nodeType":"784","messageId":"783","endLine":1088,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":1088,"column":27,"nodeType":"779","messageId":"780","endLine":1088,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":1152,"column":8,"nodeType":"784","messageId":"783","endLine":1152,"endColumn":36},{"ruleId":"777","severity":1,"message":"809","line":1152,"column":25,"nodeType":"779","messageId":"780","endLine":1152,"endColumn":35},{"ruleId":"777","severity":1,"message":"781","line":1208,"column":8,"nodeType":"784","messageId":"783","endLine":1208,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":1208,"column":26,"nodeType":"779","messageId":"780","endLine":1208,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":1274,"column":8,"nodeType":"784","messageId":"783","endLine":1274,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":1274,"column":27,"nodeType":"779","messageId":"780","endLine":1274,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":1282,"column":8,"nodeType":"784","messageId":"783","endLine":1282,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":1282,"column":26,"nodeType":"779","messageId":"780","endLine":1282,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":1290,"column":8,"nodeType":"784","messageId":"783","endLine":1290,"endColumn":40},{"ruleId":"777","severity":1,"message":"809","line":1290,"column":29,"nodeType":"779","messageId":"780","endLine":1290,"endColumn":39},{"ruleId":"777","severity":1,"message":"781","line":1338,"column":8,"nodeType":"784","messageId":"783","endLine":1338,"endColumn":42},{"ruleId":"777","severity":1,"message":"809","line":1338,"column":31,"nodeType":"779","messageId":"780","endLine":1338,"endColumn":41},{"ruleId":"777","severity":1,"message":"781","line":1408,"column":8,"nodeType":"784","messageId":"783","endLine":1408,"endColumn":38},{"ruleId":"777","severity":1,"message":"809","line":1408,"column":27,"nodeType":"779","messageId":"780","endLine":1408,"endColumn":37},{"ruleId":"777","severity":1,"message":"781","line":1416,"column":8,"nodeType":"784","messageId":"783","endLine":1416,"endColumn":42},{"ruleId":"777","severity":1,"message":"809","line":1416,"column":31,"nodeType":"779","messageId":"780","endLine":1416,"endColumn":41},{"ruleId":"777","severity":1,"message":"781","line":1463,"column":8,"nodeType":"784","messageId":"783","endLine":1463,"endColumn":41},{"ruleId":"777","severity":1,"message":"809","line":1463,"column":30,"nodeType":"779","messageId":"780","endLine":1463,"endColumn":40},{"ruleId":"777","severity":1,"message":"781","line":1471,"column":8,"nodeType":"784","messageId":"783","endLine":1471,"endColumn":43},{"ruleId":"777","severity":1,"message":"809","line":1471,"column":32,"nodeType":"779","messageId":"780","endLine":1471,"endColumn":42},{"ruleId":"777","severity":1,"message":"781","line":1483,"column":8,"nodeType":"784","messageId":"783","endLine":1483,"endColumn":44},{"ruleId":"777","severity":1,"message":"809","line":1483,"column":33,"nodeType":"779","messageId":"780","endLine":1483,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":1491,"column":8,"nodeType":"784","messageId":"783","endLine":1491,"endColumn":44},{"ruleId":"777","severity":1,"message":"809","line":1491,"column":33,"nodeType":"779","messageId":"780","endLine":1491,"endColumn":43},{"ruleId":"777","severity":1,"message":"781","line":1501,"column":8,"nodeType":"784","messageId":"783","endLine":1501,"endColumn":37},{"ruleId":"777","severity":1,"message":"809","line":1501,"column":26,"nodeType":"779","messageId":"780","endLine":1501,"endColumn":36},{"ruleId":"777","severity":1,"message":"781","line":1590,"column":8,"nodeType":"784","messageId":"783","endLine":1590,"endColumn":43},{"ruleId":"777","severity":1,"message":"809","line":1590,"column":32,"nodeType":"779","messageId":"780","endLine":1590,"endColumn":42},{"ruleId":"777","severity":1,"message":"781","line":1655,"column":8,"nodeType":"784","messageId":"783","endLine":1655,"endColumn":39},{"ruleId":"777","severity":1,"message":"809","line":1655,"column":28,"nodeType":"779","messageId":"780","endLine":1655,"endColumn":38},"@typescript-eslint/explicit-module-boundary-types","Argument 'values' should be typed with a non-any type.","Identifier","anyTypedArg","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","Argument 'sourceDoc' should be typed.","missingArgType","Argument 'targetDoc' should be typed.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull",["843"],["844"],"FunctionExpression",["845"],["846"],["847"],["848"],["849"],["850"],["851"],["852"],["853"],["854"],["855"],["856"],["857"],["858"],"Argument 'props' should be typed with a non-any type.",["859"],["860"],["861"],["862"],["863"],["864"],["865"],["866"],["867"],["868"],["869"],["870"],["871"],["872"],["873"],["874"],["875"],["876"],["877"],["878"],["879"],["880"],["881"],["882"],["883"],["884"],["885"],["886"],["887"],["888"],"Argument 'files' should be typed with a non-any type.","Argument 'enumType' should be typed with a non-any type.","Argument 'errors' should be typed with a non-any type.",{"messageId":"889","fix":"890","desc":"891"},{"messageId":"889","fix":"892","desc":"891"},{"messageId":"889","fix":"893","desc":"891"},{"messageId":"889","fix":"894","desc":"891"},{"messageId":"889","fix":"895","desc":"891"},{"messageId":"889","fix":"896","desc":"891"},{"messageId":"889","fix":"897","desc":"891"},{"messageId":"889","fix":"898","desc":"891"},{"messageId":"889","fix":"899","desc":"891"},{"messageId":"889","fix":"900","desc":"891"},{"messageId":"889","fix":"901","desc":"891"},{"messageId":"889","fix":"902","desc":"891"},{"messageId":"889","fix":"903","desc":"891"},{"messageId":"889","fix":"904","desc":"891"},{"messageId":"889","fix":"905","desc":"891"},{"messageId":"889","fix":"906","desc":"891"},{"messageId":"889","fix":"907","desc":"891"},{"messageId":"889","fix":"908","desc":"891"},{"messageId":"889","fix":"909","desc":"891"},{"messageId":"889","fix":"910","desc":"891"},{"messageId":"889","fix":"911","desc":"891"},{"messageId":"889","fix":"912","desc":"891"},{"messageId":"889","fix":"913","desc":"891"},{"messageId":"889","fix":"914","desc":"891"},{"messageId":"889","fix":"915","desc":"891"},{"messageId":"889","fix":"916","desc":"891"},{"messageId":"889","fix":"917","desc":"891"},{"messageId":"889","fix":"918","desc":"891"},{"messageId":"889","fix":"919","desc":"891"},{"messageId":"889","fix":"920","desc":"891"},{"messageId":"889","fix":"921","desc":"891"},{"messageId":"889","fix":"922","desc":"891"},{"messageId":"889","fix":"923","desc":"891"},{"messageId":"889","fix":"924","desc":"891"},{"messageId":"889","fix":"925","desc":"891"},{"messageId":"889","fix":"926","desc":"891"},{"messageId":"889","fix":"927","desc":"891"},{"messageId":"889","fix":"928","desc":"891"},{"messageId":"889","fix":"929","desc":"891"},{"messageId":"889","fix":"930","desc":"891"},{"messageId":"889","fix":"931","desc":"891"},{"messageId":"889","fix":"932","desc":"891"},{"messageId":"889","fix":"933","desc":"891"},{"messageId":"889","fix":"934","desc":"891"},{"messageId":"889","fix":"935","desc":"891"},{"messageId":"889","fix":"936","desc":"891"},"suggestOptionalChain",{"range":"937","text":"938"},"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",{"range":"939","text":"938"},{"range":"940","text":"938"},{"range":"941","text":"938"},{"range":"942","text":"938"},{"range":"943","text":"938"},{"range":"944","text":"938"},{"range":"945","text":"938"},{"range":"946","text":"938"},{"range":"947","text":"938"},{"range":"948","text":"938"},{"range":"949","text":"938"},{"range":"950","text":"938"},{"range":"951","text":"938"},{"range":"952","text":"938"},{"range":"953","text":"938"},{"range":"954","text":"938"},{"range":"955","text":"938"},{"range":"956","text":"938"},{"range":"957","text":"938"},{"range":"958","text":"938"},{"range":"959","text":"938"},{"range":"960","text":"938"},{"range":"961","text":"938"},{"range":"962","text":"938"},{"range":"963","text":"938"},{"range":"964","text":"938"},{"range":"965","text":"938"},{"range":"966","text":"938"},{"range":"967","text":"938"},{"range":"968","text":"938"},{"range":"969","text":"938"},{"range":"970","text":"938"},{"range":"971","text":"938"},{"range":"972","text":"938"},{"range":"973","text":"938"},{"range":"974","text":"938"},{"range":"975","text":"938"},{"range":"976","text":"938"},{"range":"977","text":"938"},{"range":"978","text":"938"},{"range":"979","text":"938"},{"range":"980","text":"938"},{"range":"981","text":"938"},{"range":"982","text":"938"},{"range":"983","text":"938"},[993,994],"?",[1750,1751],[2899,2900],[3397,3398],[3930,3931],[4054,4055],[4619,4620],[4753,4754],[4890,4891],[5026,5027],[6170,6171],[6558,6559],[6589,6590],[7136,7137],[7495,7496],[7554,7555],[5957,5958],[1458,1459],[1625,1626],[1860,1861],[1953,1954],[2184,2185],[2220,2221],[2268,2269],[2519,2520],[2562,2563],[2578,2579],[2601,2602],[2643,2644],[2727,2728],[4386,4387],[4789,4790],[5299,5300],[5463,5464],[1744,1745],[3762,3763],[3915,3916],[484,485],[642,643],[806,807],[976,977],[1213,1214],[1294,1295],[1342,1343],[1505,1506],[1895,1896]]